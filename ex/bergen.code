vert = vertexshader "
uniform mat4 proj;
uniform mat4 cam;
attribute vec3 normal;
attribute vec3 pos;
varying vec3 normalInterp;
varying vec3 vertPos;
varying vec3 lightpos;

void main(void) {
	gl_Position = proj * cam * vec4(pos - vec3(.5), 1.0);
	highp float x = sqrt(3.0);
	lightpos = (proj * cam * vec4(0.0, 0, -1, 0.0)).xyz;
	normalInterp = normal;
	vertPos = gl_Position.xyz;
}
"

;***
frag = fragmentshader "
uniform highp float time;
varying highp vec3 normalInterp;
varying highp vec3 vertPos;
varying highp vec3 lightpos;
void main(void) {
	highp float x = sqrt(3.0);
	highp vec3 col = vec3(0.1,0.1,0.0) + vec3(dot(lightpos, normalInterp)); // / 10000.0; //;cross(normalInterp, lightpos);
	gl_FragColor = vec4(col/vertPos.z + normalInterp,1.0);
}
"

r = scherm.breedte / scherm.hoogte
mx = -1+muis.x/(100·r)·2
my = -1+muis.y/100·2
buf2 = vertexbuffer [
	0,0,0, 1,1,0, 0,1,0, 0,0,0, 1,1,0, 1,0,0,
	0,0,0, 1,0,1, 0,0,1, 0,0,0, 1,0,1, 1,0,0,
	0,0,0, 0,1,1, 0,0,1, 0,0,0, 0,1,1, 0,1,0,
	0,0,1, 1,1,1, 0,1,1, 0,0,1, 1,1,1, 1,0,1,
	0,1,0, 1,1,1, 0,1,1, 0,1,0, 1,1,1, 1,1,0,
	1,0,0, 1,1,1, 1,0,1, 1,0,0, 1,1,1, 1,1,0,
]

grid := plet(plet(tiles))
buf = vertexbuffer grid
pa = [(0,h1,0), (0,h2,1), (1,h3,0), (1,h4,1), (1,h3,0), (0,h2,1)]
h1 = hmap(h)
h2 = hmap(h+n)
h3 = hmap(h+1)
h4 = hmap(h+n+1)

n = 20
hmap := (0..n × 0..n) map (X,Y → sin((tan(X)-n/2)²+(Y-n/2)²)·1.7)

tiles = (0..n × 0..n) zip (0..n²) map ((i,j),h → pa map (pp → pp + (i,0,j)))

normals := (0..6 × 0..n × 0..n) map ((ni,ny,nx) → (Nx,Ny,0.2))
Nx = (nx+mx)/n
Ny = (ny+my)/n
mx = kies((ni=1 of ni=5 of ni=3),1,0)
my = kies((ni=2 of ni=3 of ni=4),1,0)

normalbuf = vertexbuffer(plet(normals))

prog = shaderprogram(vert, frag)
prog1 = shaderbind(prog, "pos", buf)
prog2 = shaderbind(prog1, "normal", normalbuf)
prog3 = matbind(prog2, "cam", plet cam)
prog4 = matbind(prog3, "proj", plet proj)
prog5 = uniformbind(prog4, "time", looptijd)
uit = setcontext3d(x → superrender(x,buf,prog5,#tiles·2))

; matrix math
;proj = schaal(.01,.01,.01)
proj = projection(τ/4,1.778,.001,1000)
cam = Mv · My · Mx

; model
Ms = schaal(.5, .5, .5)
Mx = xdraai(xhoek)
My = ydraai(yhoek)
Mv = verplaats(xpos, ypos, zpos)

yhoek = τ-muis.x/100·τ
xhoek = klem((100-muis.y)/100·τ/2+τ·.25,τ·.25,τ·.75)

xpos := 0
ypos := 1.1
zpos := 1

; automove
als scherm.ververst dan
	xpos := xpos + sin(yhoek) · .02
	ypos := ypos + sin(xhoek) · .02
	zpos := zpos + cos(yhoek) · .02
eind
als scherm.ververst en toets.s dan
	xpos := xpos - sin(yhoek) · .02
	zpos := zpos - cos(yhoek) · .02
eind
als scherm.ververst en toets.a dan
	xpos := xpos + sin(yhoek+τ/4) · .02
	zpos := zpos + cos(yhoek+τ/4) · .02
eind
als scherm.ververst en toets.d dan
	xpos := xpos + sin(yhoek-τ/4) · .02
	zpos := zpos + cos(yhoek-τ/4) · .02
eind
als scherm.ververst en toets.omhoog dan ypos := ypos + .02 eind
als scherm.ververst en toets.omlaag dan ypos := ypos - .02 eind

projection = (fov,ar,znear,zfar) → Proj
	zf = 1 / tan(fov/2)
	rangeinv = 1 / (znear - zfar)
	z1 = (-znear-zfar)·rangeinv
	z2 = 2·zfar·znear·rangeinv
	Proj = ((zf/ar,0,0,0),(0,zf,0,0),(0,0,z1,1),(0,0,z2,0))


; fps counter
fps := 60
frames := 0
fpstijd := looptijd + 1
als looptijd > fpstijd dan
	fpstijd := looptijd + 1
	fps := frames
	frames := 0
eind
als scherm.ververst dan
	frames := frames + 1
eind

