sas: exp
exp: pureexp | userfunction
pureexp:
	| function | atom

number: NUMBER
identifier: IDENTIFIER
text: STRING

function:
	| (unop exp)
	| (atom (binop exp)?)
atom: identifier | number | text | brackets
brackets: '(' exp ')'
binop:
	| '.'
	| '^' | '_'
	| '*' | '/' | '%'
	| '+' | '-' | '+-'
	| '..'
	| '>' | '<' | '>=' | '<=' | '=' | '!='
	| 'in' | 'as' | ':' | 'is'
	| '|' | '\\' | '&' | 'xor' | 'nor' | 'and' | 'or'
	| '>>' | '<<' | '@' | '->' 
	| '=>' | '<=>'
unop: '#' | '_' | '^' | '!' | '-' | '+' | '+-'

userfunction: 'XYZ'
a: :
	| list | set | if | function
	| identifier | number | text | data
	| '(' exp ')' | logicblock

identifier: IDENTIFIER
text: STRING
logicblock: INDENT (indent exp newline)* DEDENT
linesep: eol indent
sep: linesep | (',' linesep?)
item: exp
collection: INDENT sep? (item sep)* item? DEDENT 
setcollection: INDENT sep? (item sep)* elseitem? DEDENT 
elseitem: 'else' '->' exp

list: '[' collection ']'
set: '{' setcollection '}'
arguments: '(' collection ')'

if: ruleif | blockif | inlineif
ruleif:
	'if' newline block
	'then' newline block
	('elseif' newline block)*
	('else' newline block)?

blockif:
	'if' exp 'then'? newline block
	('elseif' newline block)*
	('else' newline block)?

inlineif:
	'if' exp 'then' exp 'else' exp 'end'?

; functies
function: infix | prefix | blockfix
unop: '#' | '_' | '^' | '!' | '-' | '+' | '+-'
binop:
	| '.'
	| '^' | '_'
	| '*' | '/' | '%'
	| '+' | '-' | '+-'
	| '..'
	| '>' | '<' | '>=' | '<=' | '=' | '!='
	| 'in' | 'as' | ':' | 'is'
	| '|' | '\\' | '&' | 'xor' | 'nor' | 'and' | 'or'
	| '>>' | '<<' | '@' | '->' 
	| '=>' | '<=>'
prefix: unop (exp | arguments)
infix: (exp binop exp) | blockfix
blockfix:
	INDENT
	newline
	(indent BINOP exp newline)+
	DEDENT

parameters: pureexp | arguments
userfunction: (identifier parameters) | (pureexp identifier parameters)
