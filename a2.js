
performance = {now: function() { return 0; }}
var A = (argG) => {
  var B = argG;
  var C = 1;
  var B = B[C];
  if (B) {
    var B = 100;
    var C = 25;
    var C = - C;
    var B = B + C;
    var C = 2;
    var B = B / C;
    tmp = B;
  } else tmp = null;
  var B = tmp;
  var C = (argH) => {
    var D = argH;
    var E = argG;
    var F = 1;
    var E = E[F];
    if (E) {
      var E = new Set([]);
      tmp = E;
    } else tmp = null;
    var E = tmp;
    var F = argG;
    var G = 6;
    var F = F[G];
    if (F) {
      var F = argG;
      var G = 0;
      var F = F[G];
      var G = 12;
      var F = F[G];
      var G = argG;
      var H = 5;
      var G = G[H];
      var G = new Set([G]);
      var F = new Set([...F, ...G]);
      tmp = F;
    } else tmp = null;
    var F = tmp;
    var G = argG;
    var H = 7;
    var G = G[H];
    if (G) {
      var G = argG;
      var H = 0;
      var G = G[H];
      var H = 12;
      var G = G[H];
      var H = argG;
      var I = 5;
      var H = H[I];
      var H = new Set([H]);
      var G = new Set([...G].filter(x => !H.has(x)));
      tmp = G;
    } else tmp = null;
    var G = tmp;
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 12;
    var H = H[I];
    var E = [E,F,G,H];
    var E = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(E);
    var D = E.has(D);
    return D;
  }
  var D = 87;
  var C = C(D);
  var D = argG;
  var E = 0;
  var D = D[E];
  var E = 0;
  var D = D[E];
  var E = 100;
  var F = 25;
  var F = - F;
  var E = E + F;
  var D = D < E;
  var C = C && D;
  if (C) {
    var C = argG;
    var D = 0;
    var C = C[D];
    var D = 0;
    var C = C[D];
    var D = 2;
    var C = C + D;
    tmp = C;
  } else tmp = null;
  var C = tmp;
  var D = (argH) => {
    var E = argH;
    var F = argG;
    var G = 1;
    var F = F[G];
    if (F) {
      var F = new Set([]);
      tmp = F;
    } else tmp = null;
    var F = tmp;
    var G = argG;
    var H = 6;
    var G = G[H];
    if (G) {
      var G = argG;
      var H = 0;
      var G = G[H];
      var H = 12;
      var G = G[H];
      var H = argG;
      var I = 5;
      var H = H[I];
      var H = new Set([H]);
      var G = new Set([...G, ...H]);
      tmp = G;
    } else tmp = null;
    var G = tmp;
    var H = argG;
    var I = 7;
    var H = H[I];
    if (H) {
      var H = argG;
      var I = 0;
      var H = H[I];
      var I = 12;
      var H = H[I];
      var I = argG;
      var J = 5;
      var I = I[J];
      var I = new Set([I]);
      var H = new Set([...H].filter(x => !I.has(x)));
      tmp = H;
    } else tmp = null;
    var H = tmp;
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 12;
    var I = I[J];
    var F = [F,G,H,I];
    var F = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(F);
    var E = F.has(E);
    return E;
  }
  var E = 83;
  var D = D(E);
  var E = argG;
  var F = 0;
  var E = E[F];
  var F = 0;
  var E = E[F];
  var F = 0;
  var E = E > F;
  var D = D && E;
  if (D) {
    var D = argG;
    var E = 0;
    var D = D[E];
    var E = 0;
    var D = D[E];
    var E = 2;
    var E = - E;
    var D = D + E;
    tmp = D;
  } else tmp = null;
  var D = tmp;
  var E = argG;
  var F = 0;
  var E = E[F];
  var F = 0;
  var E = E[F];
  var B = [B,C,D,E];
  var B = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(B);
  var C = argG;
  var D = 1;
  var C = C[D];
  if (C) {
    var C = argG;
    var D = 2;
    var C = C[D];
    tmp = C;
  } else tmp = null;
  var C = tmp;
  var D = argG;
  var E = 0;
  var D = D[E];
  var E = 1;
  var D = D[E];
  var C = [C,D];
  var C = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(C);
  var D = argG;
  var E = 1;
  var D = D[E];
  if (D) {
    var D = argG;
    var E = 4;
    var D = D[E];
    var E = 2;
    var D = D / E;
    tmp = D;
  } else tmp = null;
  var D = tmp;
  var E = argG;
  var F = 2;
  var E = E[F];
  var F = argG;
  var G = 1;
  var F = F[G];
  if (F) {
    var F = argG;
    var G = 2;
    var F = F[G];
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 1;
  var G = G[H];
  var F = [F,G];
  var F = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(F);
  var F = - F;
  var E = E + F;
  var F = argG;
  var G = 1;
  var F = F[G];
  if (F) {
    var F = argG;
    var G = 2;
    var F = F[G];
    var G = argG;
    var H = 1;
    var G = G[H];
    if (G) {
      var G = argG;
      var H = 2;
      var G = G[H];
      tmp = G;
    } else tmp = null;
    var G = tmp;
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 1;
    var H = H[I];
    var G = [G,H];
    var G = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(G);
    var G = - G;
    var F = F + G;
    var G = 1;
    var F = F + G;
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 2;
  var G = G[H];
  var H = 0;
  var G = G < H;
  var H = argG;
  var I = 0;
  var H = H[I];
  var I = 2;
  var H = H[I];
  var I = argG;
  var J = 4;
  var I = I[J];
  var H = H > I;
  var G = G || H;
  if (G) {
    var G = argG;
    var H = 2;
    var G = G[H];
    var H = argG;
    var I = 1;
    var H = H[I];
    if (H) {
      var H = argG;
      var I = 2;
      var H = H[I];
      tmp = H;
    } else tmp = null;
    var H = tmp;
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 1;
    var I = I[J];
    var H = [H,I];
    var H = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(H);
    var H = - H;
    var G = G + H;
    var H = 1;
    var G = G + H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = argG;
  var I = 0;
  var H = H[I];
  var I = 10;
  var H = H[I];
  var F = [F,G,H];
  var F = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(F);
  var E = E < F;
  var E = ! E;
  if (E) {
    var E = argG;
    var F = 0;
    var E = E[F];
    var F = 2;
    var E = E[F];
    var F = argG;
    var G = 0;
    var F = F[G];
    var G = 7;
    var F = F[G];
    var E = E + F;
    tmp = E;
  } else tmp = null;
  var E = tmp;
  var F = argG;
  var G = 0;
  var F = F[G];
  var G = 2;
  var F = F[G];
  var G = 0;
  var F = F < G;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 2;
  var G = G[H];
  var H = argG;
  var I = 4;
  var H = H[I];
  var G = G > H;
  var F = F || G;
  if (F) {
    var F = 90;
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 2;
  var G = G[H];
  var H = argG;
  var I = 4;
  var H = H[I];
  var I = 15;
  var I = - I;
  var H = H + I;
  var G = G > H;
  var H = argG;
  var I = 1;
  var H = H[I];
  if (H) {
    var H = 100;
    var I = 2;
    var H = H / I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 2;
  var I = I[J];
  var J = 0;
  var I = I < J;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 4;
  var K = K[L];
  var J = J > K;
  var I = I || J;
  if (I) {
    var I = 50;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = argG;
    var L = 2;
    var K = K[L];
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 1;
  var L = L[M];
  var K = [K,L];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var K = - K;
  var J = J + K;
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = argG;
    var L = 2;
    var K = K[L];
    var L = argG;
    var M = 1;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 2;
      var L = L[M];
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 1;
    var M = M[N];
    var L = [L,M];
    var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
    var L = - L;
    var K = K + L;
    var L = 1;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = 0;
  var L = L < M;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 4;
  var N = N[O];
  var M = M > N;
  var L = L || M;
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 2;
      var M = M[N];
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 1;
    var N = N[O];
    var M = [M,N];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var M = - M;
    var L = L + M;
    var M = 1;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 10;
  var M = M[N];
  var K = [K,L,M];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var J = J < K;
  var J = ! J;
  if (J) {
    var J = argG;
    var K = 0;
    var J = J[K];
    var K = 4;
    var J = J[K];
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 6;
    var K = K[L];
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 4;
  var K = K[L];
  var H = [H,I,J,K];
  var H = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(H);
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = 100;
    var J = 25;
    var J = - J;
    var I = I + J;
    var J = 2;
    var I = I / J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = (argH) => {
    var K = argH;
    var L = argG;
    var M = 1;
    var L = L[M];
    if (L) {
      var L = new Set([]);
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 6;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 0;
      var M = M[N];
      var N = 12;
      var M = M[N];
      var N = argG;
      var O = 5;
      var N = N[O];
      var N = new Set([N]);
      var M = new Set([...M, ...N]);
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 7;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 0;
      var N = N[O];
      var O = 12;
      var N = N[O];
      var O = argG;
      var P = 5;
      var O = O[P];
      var O = new Set([O]);
      var N = new Set([...N].filter(x => !O.has(x)));
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 12;
    var O = O[P];
    var L = [L,M,N,O];
    var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
    var K = L.has(K);
    return K;
  }
  var K = 38;
  var J = J(K);
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 11;
  var K = K[L];
  var L = 100;
  var M = 25;
  var M = - M;
  var L = L + M;
  var K = K < L;
  var J = J && K;
  if (J) {
    var J = argG;
    var K = 0;
    var J = J[K];
    var K = 11;
    var J = J[K];
    var K = 2;
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = (argH) => {
    var L = argH;
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = new Set([]);
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 6;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 0;
      var N = N[O];
      var O = 12;
      var N = N[O];
      var O = argG;
      var P = 5;
      var O = O[P];
      var O = new Set([O]);
      var N = new Set([...N, ...O]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 7;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O].filter(x => !P.has(x)));
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 12;
    var P = P[Q];
    var M = [M,N,O,P];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var L = M.has(L);
    return L;
  }
  var L = 40;
  var K = K(L);
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 11;
  var L = L[M];
  var M = 0;
  var L = L > M;
  var K = K && L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 11;
    var K = K[L];
    var L = 2;
    var L = - L;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 11;
  var L = L[M];
  var I = [I,J,K,L];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var H = H > I;
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = 100;
    var J = 2;
    var I = I / J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = 0;
  var J = J < K;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var K = K > L;
  var J = J || K;
  if (J) {
    var J = 50;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 1;
  var M = M[N];
  var L = [L,M];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var L = - L;
  var K = K + L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 2;
      var M = M[N];
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 1;
    var N = N[O];
    var M = [M,N];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var M = - M;
    var L = L + M;
    var M = 1;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = argG;
    var N = 2;
    var M = M[N];
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 2;
      var N = N[O];
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 1;
    var O = O[P];
    var N = [N,O];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var N = - N;
    var M = M + N;
    var N = 1;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 10;
  var N = N[O];
  var L = [L,M,N];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var K = K < L;
  var K = ! K;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 4;
    var K = K[L];
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 6;
    var L = L[M];
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 4;
  var L = L[M];
  var I = [I,J,K,L];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var J = argG;
  var K = 1;
  var J = J[K];
  if (J) {
    var J = 100;
    var K = 25;
    var K = - K;
    var J = J + K;
    var K = 2;
    var J = J / K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = (argH) => {
    var L = argH;
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = new Set([]);
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 6;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 0;
      var N = N[O];
      var O = 12;
      var N = N[O];
      var O = argG;
      var P = 5;
      var O = O[P];
      var O = new Set([O]);
      var N = new Set([...N, ...O]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 7;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O].filter(x => !P.has(x)));
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 12;
    var P = P[Q];
    var M = [M,N,O,P];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var L = M.has(L);
    return L;
  }
  var L = 38;
  var K = K(L);
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 11;
  var L = L[M];
  var M = 100;
  var N = 25;
  var N = - N;
  var M = M + N;
  var L = L < M;
  var K = K && L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 11;
    var K = K[L];
    var L = 2;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = (argH) => {
    var M = argH;
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = new Set([]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 6;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O, ...P]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 7;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P].filter(x => !Q.has(x)));
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 12;
    var Q = Q[R];
    var N = [N,O,P,Q];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var M = N.has(M);
    return M;
  }
  var M = 40;
  var L = L(M);
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 11;
  var M = M[N];
  var N = 0;
  var M = M > N;
  var L = L && M;
  if (L) {
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 11;
    var L = L[M];
    var M = 2;
    var M = - M;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 11;
  var M = M[N];
  var J = [J,K,L,M];
  var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
  var K = 25;
  var J = J + K;
  var I = I < J;
  var H = H && I;
  var G = G && H;
  if (G) {
    var G = argG;
    var H = 4;
    var G = G[H];
    var H = 15;
    var H = - H;
    var G = G + H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = argG;
  var I = 0;
  var H = H[I];
  var I = 2;
  var H = H[I];
  var I = 15;
  var H = H < I;
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = 100;
    var J = 2;
    var I = I / J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = 0;
  var J = J < K;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var K = K > L;
  var J = J || K;
  if (J) {
    var J = 50;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 1;
  var M = M[N];
  var L = [L,M];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var L = - L;
  var K = K + L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 2;
      var M = M[N];
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 1;
    var N = N[O];
    var M = [M,N];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var M = - M;
    var L = L + M;
    var M = 1;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = argG;
    var N = 2;
    var M = M[N];
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 2;
      var N = N[O];
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 1;
    var O = O[P];
    var N = [N,O];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var N = - N;
    var M = M + N;
    var N = 1;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 10;
  var N = N[O];
  var L = [L,M,N];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var K = K < L;
  var K = ! K;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 4;
    var K = K[L];
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 6;
    var L = L[M];
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 4;
  var L = L[M];
  var I = [I,J,K,L];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var J = argG;
  var K = 1;
  var J = J[K];
  if (J) {
    var J = 100;
    var K = 25;
    var K = - K;
    var J = J + K;
    var K = 2;
    var J = J / K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = (argH) => {
    var L = argH;
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = new Set([]);
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 6;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 0;
      var N = N[O];
      var O = 12;
      var N = N[O];
      var O = argG;
      var P = 5;
      var O = O[P];
      var O = new Set([O]);
      var N = new Set([...N, ...O]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 7;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O].filter(x => !P.has(x)));
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 12;
    var P = P[Q];
    var M = [M,N,O,P];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var L = M.has(L);
    return L;
  }
  var L = 87;
  var K = K(L);
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 0;
  var L = L[M];
  var M = 100;
  var N = 25;
  var N = - N;
  var M = M + N;
  var L = L < M;
  var K = K && L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 0;
    var K = K[L];
    var L = 2;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = (argH) => {
    var M = argH;
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = new Set([]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 6;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O, ...P]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 7;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P].filter(x => !Q.has(x)));
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 12;
    var Q = Q[R];
    var N = [N,O,P,Q];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var M = N.has(M);
    return M;
  }
  var M = 83;
  var L = L(M);
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 0;
  var M = M[N];
  var N = 0;
  var M = M > N;
  var L = L && M;
  if (L) {
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 0;
    var L = L[M];
    var M = 2;
    var M = - M;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 0;
  var M = M[N];
  var J = [J,K,L,M];
  var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
  var I = I > J;
  var J = argG;
  var K = 1;
  var J = J[K];
  if (J) {
    var J = 100;
    var K = 2;
    var J = J / K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = 0;
  var K = K < L;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = argG;
  var N = 4;
  var M = M[N];
  var L = L > M;
  var K = K || L;
  if (K) {
    var K = 50;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 2;
  var L = L[M];
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = argG;
    var N = 2;
    var M = M[N];
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 1;
  var N = N[O];
  var M = [M,N];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var M = - M;
  var L = L + M;
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = argG;
    var N = 2;
    var M = M[N];
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 2;
      var N = N[O];
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 1;
    var O = O[P];
    var N = [N,O];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var N = - N;
    var M = M + N;
    var N = 1;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = 0;
  var N = N < O;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 4;
  var P = P[Q];
  var O = O > P;
  var N = N || O;
  if (N) {
    var N = argG;
    var O = 2;
    var N = N[O];
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 2;
      var O = O[P];
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 1;
    var P = P[Q];
    var O = [O,P];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var O = - O;
    var N = N + O;
    var O = 1;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 10;
  var O = O[P];
  var M = [M,N,O];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var L = L < M;
  var L = ! L;
  if (L) {
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 4;
    var L = L[M];
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 6;
    var M = M[N];
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 4;
  var M = M[N];
  var J = [J,K,L,M];
  var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = 100;
    var L = 25;
    var L = - L;
    var K = K + L;
    var L = 2;
    var K = K / L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = (argH) => {
    var M = argH;
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = new Set([]);
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 6;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 0;
      var O = O[P];
      var P = 12;
      var O = O[P];
      var P = argG;
      var Q = 5;
      var P = P[Q];
      var P = new Set([P]);
      var O = new Set([...O, ...P]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 7;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P].filter(x => !Q.has(x)));
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 12;
    var Q = Q[R];
    var N = [N,O,P,Q];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var M = N.has(M);
    return M;
  }
  var M = 87;
  var L = L(M);
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 0;
  var M = M[N];
  var N = 100;
  var O = 25;
  var O = - O;
  var N = N + O;
  var M = M < N;
  var L = L && M;
  if (L) {
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 0;
    var L = L[M];
    var M = 2;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = (argH) => {
    var N = argH;
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = new Set([]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 6;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P, ...Q]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 7;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q].filter(x => !R.has(x)));
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 12;
    var R = R[S];
    var O = [O,P,Q,R];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var N = O.has(N);
    return N;
  }
  var N = 83;
  var M = M(N);
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 0;
  var N = N[O];
  var O = 0;
  var N = N > O;
  var M = M && N;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 0;
    var M = M[N];
    var N = 2;
    var N = - N;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 0;
  var N = N[O];
  var K = [K,L,M,N];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var L = 25;
  var K = K + L;
  var J = J < K;
  var I = I && J;
  var H = H && I;
  if (H) {
    var H = 15;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 2;
  var I = I[J];
  var D = [D,E,F,G,H,I];
  var D = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(D);
  var E = argG;
  var F = 1;
  var E = E[F];
  if (E) {
    var E = 0;
    tmp = E;
  } else tmp = null;
  var E = tmp;
  var F = argG;
  var G = 0;
  var F = F[G];
  var G = 2;
  var F = F[G];
  var G = argG;
  var H = 4;
  var G = G[H];
  var F = F > G;
  if (F) {
    var F = argG;
    var G = 0;
    var F = F[G];
    var G = 3;
    var F = F[G];
    var G = 1;
    var F = F + G;
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 3;
  var G = G[H];
  var E = [E,F,G];
  var E = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(E);
  var F = argG;
  var G = 1;
  var F = F[G];
  if (F) {
    var F = 100;
    var G = 2;
    var F = F / G;
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = argG;
  var H = 0;
  var G = G[H];
  var H = 2;
  var G = G[H];
  var H = 0;
  var G = G < H;
  var H = argG;
  var I = 0;
  var H = H[I];
  var I = 2;
  var H = H[I];
  var I = argG;
  var J = 4;
  var I = I[J];
  var H = H > I;
  var G = G || H;
  if (G) {
    var G = 50;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = argG;
  var I = 2;
  var H = H[I];
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = argG;
    var J = 2;
    var I = I[J];
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 1;
  var J = J[K];
  var I = [I,J];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var I = - I;
  var H = H + I;
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = argG;
    var J = 2;
    var I = I[J];
    var J = argG;
    var K = 1;
    var J = J[K];
    if (J) {
      var J = argG;
      var K = 2;
      var J = J[K];
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 1;
    var K = K[L];
    var J = [J,K];
    var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
    var J = - J;
    var I = I + J;
    var J = 1;
    var I = I + J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = 0;
  var J = J < K;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var K = K > L;
  var J = J || K;
  if (J) {
    var J = argG;
    var K = 2;
    var J = J[K];
    var K = argG;
    var L = 1;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 2;
      var K = K[L];
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 1;
    var L = L[M];
    var K = [K,L];
    var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
    var K = - K;
    var J = J + K;
    var K = 1;
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 10;
  var K = K[L];
  var I = [I,J,K];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var H = H < I;
  var H = ! H;
  if (H) {
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 4;
    var H = H[I];
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 6;
    var I = I[J];
    var H = H + I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 4;
  var I = I[J];
  var F = [F,G,H,I];
  var F = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(F);
  var G = argG;
  var H = 1;
  var G = G[H];
  if (G) {
    var G = false;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = argG;
  var I = 13;
  var H = H[I];
  if (H) {
    var H = false;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 12;
  var I = I[J];
  if (I) {
    var I = true;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 5;
  var J = J[K];
  var G = [G,H,I,J];
  var G = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(G);
  var H = argG;
  var I = 1;
  var H = H[I];
  if (H) {
    var H = x => Math.random()*(x[1]-x[0]) + x[0];
    var I = 1;
    var I = - I;
    var J = 1;
    var I = [I,J];
    var H = H(I);
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 4;
  var I = I[J];
  var J = 5;
  var I = I < J;
  if (I) {
    var I = Math.abs;
    var J = argG;
    var K = 0;
    var J = J[K];
    var K = 6;
    var J = J[K];
    var I = I(J);
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 4;
  var J = J[K];
  var K = 100;
  var L = 5;
  var L = - L;
  var K = K + L;
  var J = J > K;
  if (J) {
    var J = Math.abs;
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 6;
    var K = K[L];
    var J = J(K);
    var J = - J;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var M = 15;
  var M = - M;
  var L = L + M;
  var K = K > L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = 50;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 1;
  var P = P[Q];
  var O = [O,P];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var O = - O;
  var N = N + O;
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = 0;
  var P = P < Q;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = argG;
  var S = 4;
  var R = R[S];
  var Q = Q > R;
  var P = P || Q;
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 10;
  var Q = Q[R];
  var O = [O,P,Q];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var N = N < O;
  var N = ! N;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 4;
    var N = N[O];
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 6;
    var O = O[P];
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 4;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 38;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 40;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 11;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var L = L > M;
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = 0;
  var N = N < O;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 4;
  var P = P[Q];
  var O = O > P;
  var N = N || O;
  if (N) {
    var N = 50;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 1;
  var Q = Q[R];
  var P = [P,Q];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var P = - P;
  var O = O + P;
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = 0;
  var Q = Q < R;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 2;
  var R = R[S];
  var S = argG;
  var T = 4;
  var S = S[T];
  var R = R > S;
  var Q = Q || R;
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 2;
      var R = R[S];
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 1;
    var S = S[T];
    var R = [R,S];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var R = - R;
    var Q = Q + R;
    var R = 1;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 10;
  var R = R[S];
  var P = [P,Q,R];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var O = O < P;
  var O = ! O;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 4;
    var O = O[P];
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 6;
    var P = P[Q];
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 4;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = 100;
    var O = 25;
    var O = - O;
    var N = N + O;
    var O = 2;
    var N = N / O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 38;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var Q = 100;
  var R = 25;
  var R = - R;
  var Q = Q + R;
  var P = P < Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 11;
    var O = O[P];
    var P = 2;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = (argH) => {
    var Q = argH;
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = new Set([]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 6;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S, ...T]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 7;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T].filter(x => !U.has(x)));
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 0;
    var U = U[V];
    var V = 12;
    var U = U[V];
    var R = [R,S,T,U];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var Q = R.has(Q);
    return Q;
  }
  var Q = 40;
  var P = P(Q);
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 11;
  var Q = Q[R];
  var R = 0;
  var Q = Q > R;
  var P = P && Q;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 11;
    var P = P[Q];
    var Q = 2;
    var Q = - Q;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 11;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var O = 25;
  var N = N + O;
  var M = M < N;
  var L = L && M;
  var K = K && L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 11;
    var K = K[L];
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 4;
    var L = L[M];
    var L = - L;
    var K = K + L;
    var L = 25;
    var M = 2;
    var L = L / M;
    var K = K + L;
    var K = - K;
    var L = 4;
    var K = K / L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = 15;
  var L = L < M;
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = 0;
  var N = N < O;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 4;
  var P = P[Q];
  var O = O > P;
  var N = N || O;
  if (N) {
    var N = 50;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 1;
  var Q = Q[R];
  var P = [P,Q];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var P = - P;
  var O = O + P;
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = 0;
  var Q = Q < R;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 2;
  var R = R[S];
  var S = argG;
  var T = 4;
  var S = S[T];
  var R = R > S;
  var Q = Q || R;
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 2;
      var R = R[S];
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 1;
    var S = S[T];
    var R = [R,S];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var R = - R;
    var Q = Q + R;
    var R = 1;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 10;
  var R = R[S];
  var P = [P,Q,R];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var O = O < P;
  var O = ! O;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 4;
    var O = O[P];
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 6;
    var P = P[Q];
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 4;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = 100;
    var O = 25;
    var O = - O;
    var N = N + O;
    var O = 2;
    var N = N / O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 87;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var Q = 100;
  var R = 25;
  var R = - R;
  var Q = Q + R;
  var P = P < Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 0;
    var O = O[P];
    var P = 2;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = (argH) => {
    var Q = argH;
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = new Set([]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 6;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S, ...T]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 7;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T].filter(x => !U.has(x)));
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 0;
    var U = U[V];
    var V = 12;
    var U = U[V];
    var R = [R,S,T,U];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var Q = R.has(Q);
    return Q;
  }
  var Q = 83;
  var P = P(Q);
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q > R;
  var P = P && Q;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 0;
    var P = P[Q];
    var Q = 2;
    var Q = - Q;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var M = M > N;
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = 100;
    var O = 2;
    var N = N / O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = 0;
  var O = O < P;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = argG;
  var R = 4;
  var Q = Q[R];
  var P = P > Q;
  var O = O || P;
  if (O) {
    var O = 50;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 2;
  var P = P[Q];
  var Q = argG;
  var R = 1;
  var Q = Q[R];
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 1;
  var R = R[S];
  var Q = [Q,R];
  var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
  var Q = - Q;
  var P = P + Q;
  var Q = argG;
  var R = 1;
  var Q = Q[R];
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 2;
      var R = R[S];
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 1;
    var S = S[T];
    var R = [R,S];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var R = - R;
    var Q = Q + R;
    var R = 1;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 2;
  var R = R[S];
  var S = 0;
  var R = R < S;
  var S = argG;
  var T = 0;
  var S = S[T];
  var T = 2;
  var S = S[T];
  var T = argG;
  var U = 4;
  var T = T[U];
  var S = S > T;
  var R = R || S;
  if (R) {
    var R = argG;
    var S = 2;
    var R = R[S];
    var S = argG;
    var T = 1;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 2;
      var S = S[T];
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 1;
    var T = T[U];
    var S = [S,T];
    var S = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(S);
    var S = - S;
    var R = R + S;
    var S = 1;
    var R = R + S;
    tmp = R;
  } else tmp = null;
  var R = tmp;
  var S = argG;
  var T = 0;
  var S = S[T];
  var T = 10;
  var S = S[T];
  var Q = [Q,R,S];
  var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
  var P = P < Q;
  var P = ! P;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 4;
    var P = P[Q];
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 6;
    var Q = Q[R];
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 4;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = 100;
    var P = 25;
    var P = - P;
    var O = O + P;
    var P = 2;
    var O = O / P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = (argH) => {
    var Q = argH;
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = new Set([]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 6;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S, ...T]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 7;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T].filter(x => !U.has(x)));
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 0;
    var U = U[V];
    var V = 12;
    var U = U[V];
    var R = [R,S,T,U];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var Q = R.has(Q);
    return Q;
  }
  var Q = 87;
  var P = P(Q);
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var R = 100;
  var S = 25;
  var S = - S;
  var R = R + S;
  var Q = Q < R;
  var P = P && Q;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 0;
    var P = P[Q];
    var Q = 2;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = (argH) => {
    var R = argH;
    var S = argG;
    var T = 1;
    var S = S[T];
    if (S) {
      var S = new Set([]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 6;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T, ...U]);
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 7;
    var U = U[V];
    if (U) {
      var U = argG;
      var V = 0;
      var U = U[V];
      var V = 12;
      var U = U[V];
      var V = argG;
      var W = 5;
      var V = V[W];
      var V = new Set([V]);
      var U = new Set([...U].filter(x => !V.has(x)));
      tmp = U;
    } else tmp = null;
    var U = tmp;
    var V = argG;
    var W = 0;
    var V = V[W];
    var W = 12;
    var V = V[W];
    var S = [S,T,U,V];
    var S = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(S);
    var R = S.has(R);
    return R;
  }
  var R = 83;
  var Q = Q(R);
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 0;
  var R = R[S];
  var S = 0;
  var R = R > S;
  var Q = Q && R;
  if (Q) {
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 0;
    var Q = Q[R];
    var R = 2;
    var R = - R;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 0;
  var R = R[S];
  var O = [O,P,Q,R];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var P = 25;
  var O = O + P;
  var N = N < O;
  var M = M && N;
  var L = L && M;
  if (L) {
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 0;
    var L = L[M];
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 4;
    var M = M[N];
    var M = - M;
    var L = L + M;
    var M = 25;
    var N = 2;
    var M = M / N;
    var L = L + M;
    var L = - L;
    var M = 4;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 6;
  var M = M[N];
  var H = [H,I,J,K,L,M];
  var H = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(H);
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = 1;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 4;
  var K = K[L];
  var L = 15;
  var L = - L;
  var K = K + L;
  var J = J > K;
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = 100;
    var L = 2;
    var K = K / L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = 0;
  var L = L < M;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 4;
  var N = N[O];
  var M = M > N;
  var L = L || M;
  if (L) {
    var L = 50;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = argG;
    var O = 2;
    var N = N[O];
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 1;
  var O = O[P];
  var N = [N,O];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var N = - N;
  var M = M + N;
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = argG;
    var O = 2;
    var N = N[O];
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 2;
      var O = O[P];
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 1;
    var P = P[Q];
    var O = [O,P];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var O = - O;
    var N = N + O;
    var O = 1;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = 0;
  var O = O < P;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = argG;
  var R = 4;
  var Q = Q[R];
  var P = P > Q;
  var O = O || P;
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 10;
  var P = P[Q];
  var N = [N,O,P];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var M = M < N;
  var M = ! M;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 4;
    var M = M[N];
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 6;
    var N = N[O];
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 4;
  var N = N[O];
  var K = [K,L,M,N];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 25;
    var M = - M;
    var L = L + M;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = (argH) => {
    var N = argH;
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = new Set([]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 6;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P, ...Q]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 7;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q].filter(x => !R.has(x)));
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 12;
    var R = R[S];
    var O = [O,P,Q,R];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var N = O.has(N);
    return N;
  }
  var N = 38;
  var M = M(N);
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 11;
  var N = N[O];
  var O = 100;
  var P = 25;
  var P = - P;
  var O = O + P;
  var N = N < O;
  var M = M && N;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 11;
    var M = M[N];
    var N = 2;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 40;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 0;
  var O = O > P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var O = - O;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var K = K > L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = 50;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 1;
  var P = P[Q];
  var O = [O,P];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var O = - O;
  var N = N + O;
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = 0;
  var P = P < Q;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = argG;
  var S = 4;
  var R = R[S];
  var Q = Q > R;
  var P = P || Q;
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 10;
  var Q = Q[R];
  var O = [O,P,Q];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var N = N < O;
  var N = ! N;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 4;
    var N = N[O];
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 6;
    var O = O[P];
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 4;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 38;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 40;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 11;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = 25;
  var M = M + N;
  var L = L < M;
  var K = K && L;
  var J = J && K;
  if (J) {
    var J = 2;
    var J = - J;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = 15;
  var K = K < L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = 50;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 1;
  var P = P[Q];
  var O = [O,P];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var O = - O;
  var N = N + O;
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = 0;
  var P = P < Q;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = argG;
  var S = 4;
  var R = R[S];
  var Q = Q > R;
  var P = P || Q;
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 10;
  var Q = Q[R];
  var O = [O,P,Q];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var N = N < O;
  var N = ! N;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 4;
    var N = N[O];
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 6;
    var O = O[P];
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 4;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 87;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 0;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 0;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 83;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 0;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var L = L > M;
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = 0;
  var N = N < O;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 4;
  var P = P[Q];
  var O = O > P;
  var N = N || O;
  if (N) {
    var N = 50;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 1;
  var Q = Q[R];
  var P = [P,Q];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var P = - P;
  var O = O + P;
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = 0;
  var Q = Q < R;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 2;
  var R = R[S];
  var S = argG;
  var T = 4;
  var S = S[T];
  var R = R > S;
  var Q = Q || R;
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 2;
      var R = R[S];
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 1;
    var S = S[T];
    var R = [R,S];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var R = - R;
    var Q = Q + R;
    var R = 1;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 10;
  var R = R[S];
  var P = [P,Q,R];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var O = O < P;
  var O = ! O;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 4;
    var O = O[P];
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 6;
    var P = P[Q];
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 4;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = 100;
    var O = 25;
    var O = - O;
    var N = N + O;
    var O = 2;
    var N = N / O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 87;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var Q = 100;
  var R = 25;
  var R = - R;
  var Q = Q + R;
  var P = P < Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 0;
    var O = O[P];
    var P = 2;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = (argH) => {
    var Q = argH;
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = new Set([]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 6;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S, ...T]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 7;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T].filter(x => !U.has(x)));
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 0;
    var U = U[V];
    var V = 12;
    var U = U[V];
    var R = [R,S,T,U];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var Q = R.has(Q);
    return Q;
  }
  var Q = 83;
  var P = P(Q);
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q > R;
  var P = P && Q;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 0;
    var P = P[Q];
    var Q = 2;
    var Q = - Q;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var O = 25;
  var N = N + O;
  var M = M < N;
  var L = L && M;
  var K = K && L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 7;
    var K = K[L];
    var K = - K;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 7;
  var L = L[M];
  var I = [I,J,K,L];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var J = argG;
  var K = 1;
  var J = J[K];
  if (J) {
    var J = 0;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = 0;
  var K = K < L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 8;
    var K = K[L];
    var L = 1;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 8;
  var L = L[M];
  var J = [J,K,L];
  var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = 1;
    var L = 0;
    var K = K / L;
    var L = 1;
    var M = 0;
    var L = L / M;
    var K = [K,L];
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 10;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 11;
    var L = L[M];
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 9;
  var M = M[N];
  var K = [K,L,M];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 2;
      var M = M[N];
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 1;
    var N = N[O];
    var M = [M,N];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var M = - M;
    var L = L + M;
    var M = 1;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = argG;
    var N = 2;
    var M = M[N];
    var N = argG;
    var O = 1;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 2;
      var N = N[O];
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 1;
    var O = O[P];
    var N = [N,O];
    var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
    var N = - N;
    var M = M + N;
    var N = 1;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 10;
  var N = N[O];
  var L = [L,M,N];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 38;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 40;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 11;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = new Set([]);
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 6;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 12;
    var O = O[P];
    var P = argG;
    var Q = 5;
    var P = P[Q];
    var P = new Set([P]);
    var O = new Set([...O, ...P]);
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 7;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 12;
    var P = P[Q];
    var Q = argG;
    var R = 5;
    var Q = Q[R];
    var Q = new Set([Q]);
    var P = new Set([...P].filter(x => !Q.has(x)));
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 12;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var B = [B,C,D,E,F,G,H,I,J,K,L,M,N];
  var C = (argD) => {
    var D = argG;
    var E = 3;
    var D = D[E];
    var E = (function(c) { c.clearRect(0,0,1900,1200); return c; });
    var F = (function(lf) {var l=lf[0]; var f=lf[1]; var r=l[0] ; for (var i=1; i < l.length; i++) r = f([r, l[i]]); ; return r;});
    var G = argD;
    var H = (argALK) => {
      var I = argALK;
      var J = 0;
      var I = I[J];
      var J = argALK;
      var K = 1;
      var J = J[K];
      var I = ((a,b) => (x => b(a(x))))(I,J);
      return I;
    }
    var G = [G,H];
    var F = F(G);
    var E = ((a,b) => (x => b(a(x))))(E,F);
    var D = typeof(D) == "function" ? D(E) : D[E];
    return D;
  }
  var D =  args => {
  var x = args[0][0] * SCHAAL;
  var y = (100 - args[0][1]) * SCHAAL;
  var w = args[1][0] * SCHAAL - x;
  var h = (100 - args[1][1]) * SCHAAL - y;
  return context => {
    context.fillRect(x,y,w,h);
    return context;
  }
	} ;
  var E = 0;
  var F = argG;
  var G = 1;
  var F = F[G];
  if (F) {
    var F = 100;
    var G = 25;
    var G = - G;
    var F = F + G;
    var G = 2;
    var F = F / G;
    tmp = F;
  } else tmp = null;
  var F = tmp;
  var G = (argH) => {
    var H = argH;
    var I = argG;
    var J = 1;
    var I = I[J];
    if (I) {
      var I = new Set([]);
      tmp = I;
    } else tmp = null;
    var I = tmp;
    var J = argG;
    var K = 6;
    var J = J[K];
    if (J) {
      var J = argG;
      var K = 0;
      var J = J[K];
      var K = 12;
      var J = J[K];
      var K = argG;
      var L = 5;
      var K = K[L];
      var K = new Set([K]);
      var J = new Set([...J, ...K]);
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 7;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 0;
      var K = K[L];
      var L = 12;
      var K = K[L];
      var L = argG;
      var M = 5;
      var L = L[M];
      var L = new Set([L]);
      var K = new Set([...K].filter(x => !L.has(x)));
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 12;
    var L = L[M];
    var I = [I,J,K,L];
    var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
    var H = I.has(H);
    return H;
  }
  var H = 87;
  var G = G(H);
  var H = argG;
  var I = 0;
  var H = H[I];
  var I = 0;
  var H = H[I];
  var I = 100;
  var J = 25;
  var J = - J;
  var I = I + J;
  var H = H < I;
  var G = G && H;
  if (G) {
    var G = argG;
    var H = 0;
    var G = G[H];
    var H = 0;
    var G = G[H];
    var H = 2;
    var G = G + H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = (argH) => {
    var I = argH;
    var J = argG;
    var K = 1;
    var J = J[K];
    if (J) {
      var J = new Set([]);
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 6;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 0;
      var K = K[L];
      var L = 12;
      var K = K[L];
      var L = argG;
      var M = 5;
      var L = L[M];
      var L = new Set([L]);
      var K = new Set([...K, ...L]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 7;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L].filter(x => !M.has(x)));
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 12;
    var M = M[N];
    var J = [J,K,L,M];
    var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
    var I = J.has(I);
    return I;
  }
  var I = 83;
  var H = H(I);
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 0;
  var I = I[J];
  var J = 0;
  var I = I > J;
  var H = H && I;
  if (H) {
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 0;
    var H = H[I];
    var I = 2;
    var I = - I;
    var H = H + I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 0;
  var I = I[J];
  var F = [F,G,H,I];
  var F = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(F);
  var E = [E,F];
  var F = 10;
  var G = argG;
  var H = 1;
  var G = G[H];
  if (G) {
    var G = 100;
    var H = 25;
    var H = - H;
    var G = G + H;
    var H = 2;
    var G = G / H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = (argH) => {
    var I = argH;
    var J = argG;
    var K = 1;
    var J = J[K];
    if (J) {
      var J = new Set([]);
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 6;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 0;
      var K = K[L];
      var L = 12;
      var K = K[L];
      var L = argG;
      var M = 5;
      var L = L[M];
      var L = new Set([L]);
      var K = new Set([...K, ...L]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 7;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L].filter(x => !M.has(x)));
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 12;
    var M = M[N];
    var J = [J,K,L,M];
    var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
    var I = J.has(I);
    return I;
  }
  var I = 87;
  var H = H(I);
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 0;
  var I = I[J];
  var J = 100;
  var K = 25;
  var K = - K;
  var J = J + K;
  var I = I < J;
  var H = H && I;
  if (H) {
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 0;
    var H = H[I];
    var I = 2;
    var H = H + I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = (argH) => {
    var J = argH;
    var K = argG;
    var L = 1;
    var K = K[L];
    if (K) {
      var K = new Set([]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 6;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L, ...M]);
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 7;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 0;
      var M = M[N];
      var N = 12;
      var M = M[N];
      var N = argG;
      var O = 5;
      var N = N[O];
      var N = new Set([N]);
      var M = new Set([...M].filter(x => !N.has(x)));
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 12;
    var N = N[O];
    var K = [K,L,M,N];
    var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
    var J = K.has(J);
    return J;
  }
  var J = 83;
  var I = I(J);
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 0;
  var J = J[K];
  var K = 0;
  var J = J > K;
  var I = I && J;
  if (I) {
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 0;
    var I = I[J];
    var J = 2;
    var J = - J;
    var I = I + J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 0;
  var J = J[K];
  var G = [G,H,I,J];
  var G = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(G);
  var H = 25;
  var G = G + H;
  var F = [F,G];
  var E = [E,F];
  var D = D(E);
  var E =  args => {
  var x = args[0][0] * SCHAAL;
  var y = (100 - args[0][1]) * SCHAAL;
  var w = args[1][0] * SCHAAL - x;
  var h = (100 - args[1][1]) * SCHAAL - y;
  return context => {
    context.fillRect(x,y,w,h);
    return context;
  }
	} ;
  var F = argG;
  var G = 4;
  var F = F[G];
  var G = 10;
  var G = - G;
  var F = F + G;
  var G = argG;
  var H = 1;
  var G = G[H];
  if (G) {
    var G = 100;
    var H = 25;
    var H = - H;
    var G = G + H;
    var H = 2;
    var G = G / H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = (argH) => {
    var I = argH;
    var J = argG;
    var K = 1;
    var J = J[K];
    if (J) {
      var J = new Set([]);
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 6;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 0;
      var K = K[L];
      var L = 12;
      var K = K[L];
      var L = argG;
      var M = 5;
      var L = L[M];
      var L = new Set([L]);
      var K = new Set([...K, ...L]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 7;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L].filter(x => !M.has(x)));
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 12;
    var M = M[N];
    var J = [J,K,L,M];
    var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
    var I = J.has(I);
    return I;
  }
  var I = 38;
  var H = H(I);
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 11;
  var I = I[J];
  var J = 100;
  var K = 25;
  var K = - K;
  var J = J + K;
  var I = I < J;
  var H = H && I;
  if (H) {
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 11;
    var H = H[I];
    var I = 2;
    var H = H + I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = (argH) => {
    var J = argH;
    var K = argG;
    var L = 1;
    var K = K[L];
    if (K) {
      var K = new Set([]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 6;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L, ...M]);
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 7;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 0;
      var M = M[N];
      var N = 12;
      var M = M[N];
      var N = argG;
      var O = 5;
      var N = N[O];
      var N = new Set([N]);
      var M = new Set([...M].filter(x => !N.has(x)));
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 12;
    var N = N[O];
    var K = [K,L,M,N];
    var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
    var J = K.has(J);
    return J;
  }
  var J = 40;
  var I = I(J);
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 11;
  var J = J[K];
  var K = 0;
  var J = J > K;
  var I = I && J;
  if (I) {
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 11;
    var I = I[J];
    var J = 2;
    var J = - J;
    var I = I + J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 11;
  var J = J[K];
  var G = [G,H,I,J];
  var G = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(G);
  var F = [F,G];
  var G = argG;
  var H = 4;
  var G = G[H];
  var H = argG;
  var I = 1;
  var H = H[I];
  if (H) {
    var H = 100;
    var I = 25;
    var I = - I;
    var H = H + I;
    var I = 2;
    var H = H / I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = (argH) => {
    var J = argH;
    var K = argG;
    var L = 1;
    var K = K[L];
    if (K) {
      var K = new Set([]);
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 6;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 0;
      var L = L[M];
      var M = 12;
      var L = L[M];
      var M = argG;
      var N = 5;
      var M = M[N];
      var M = new Set([M]);
      var L = new Set([...L, ...M]);
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 7;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 0;
      var M = M[N];
      var N = 12;
      var M = M[N];
      var N = argG;
      var O = 5;
      var N = N[O];
      var N = new Set([N]);
      var M = new Set([...M].filter(x => !N.has(x)));
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 12;
    var N = N[O];
    var K = [K,L,M,N];
    var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
    var J = K.has(J);
    return J;
  }
  var J = 38;
  var I = I(J);
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 11;
  var J = J[K];
  var K = 100;
  var L = 25;
  var L = - L;
  var K = K + L;
  var J = J < K;
  var I = I && J;
  if (I) {
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 11;
    var I = I[J];
    var J = 2;
    var I = I + J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = (argH) => {
    var K = argH;
    var L = argG;
    var M = 1;
    var L = L[M];
    if (L) {
      var L = new Set([]);
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 6;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 0;
      var M = M[N];
      var N = 12;
      var M = M[N];
      var N = argG;
      var O = 5;
      var N = N[O];
      var N = new Set([N]);
      var M = new Set([...M, ...N]);
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 7;
    var N = N[O];
    if (N) {
      var N = argG;
      var O = 0;
      var N = N[O];
      var O = 12;
      var N = N[O];
      var O = argG;
      var P = 5;
      var O = O[P];
      var O = new Set([O]);
      var N = new Set([...N].filter(x => !O.has(x)));
      tmp = N;
    } else tmp = null;
    var N = tmp;
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 12;
    var O = O[P];
    var L = [L,M,N,O];
    var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
    var K = L.has(K);
    return K;
  }
  var K = 40;
  var J = J(K);
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 11;
  var K = K[L];
  var L = 0;
  var K = K > L;
  var J = J && K;
  if (J) {
    var J = argG;
    var K = 0;
    var J = J[K];
    var K = 11;
    var J = J[K];
    var K = 2;
    var K = - K;
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 11;
  var K = K[L];
  var H = [H,I,J,K];
  var H = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(H);
  var I = 25;
  var H = H + I;
  var G = [G,H];
  var F = [F,G];
  var E = E(F);
  var F =  args => {
		return (function(c){
			var x = args[0][0] * SCHAAL;
			var y = (100 - args[0][1]) * SCHAAL;
			var r = args[1] * SCHAAL;
			c.beginPath();
			c.arc(x, y, r, 0, Math.PI * 2);
			c.fill();
			return c;
		});
	};
  var G = argG;
  var H = 1;
  var G = G[H];
  if (G) {
    var G = argG;
    var H = 4;
    var G = G[H];
    var H = 2;
    var G = G / H;
    tmp = G;
  } else tmp = null;
  var G = tmp;
  var H = argG;
  var I = 2;
  var H = H[I];
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = argG;
    var J = 2;
    var I = I[J];
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 1;
  var J = J[K];
  var I = [I,J];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var I = - I;
  var H = H + I;
  var I = argG;
  var J = 1;
  var I = I[J];
  if (I) {
    var I = argG;
    var J = 2;
    var I = I[J];
    var J = argG;
    var K = 1;
    var J = J[K];
    if (J) {
      var J = argG;
      var K = 2;
      var J = J[K];
      tmp = J;
    } else tmp = null;
    var J = tmp;
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 1;
    var K = K[L];
    var J = [J,K];
    var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
    var J = - J;
    var I = I + J;
    var J = 1;
    var I = I + J;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = 0;
  var J = J < K;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var K = K > L;
  var J = J || K;
  if (J) {
    var J = argG;
    var K = 2;
    var J = J[K];
    var K = argG;
    var L = 1;
    var K = K[L];
    if (K) {
      var K = argG;
      var L = 2;
      var K = K[L];
      tmp = K;
    } else tmp = null;
    var K = tmp;
    var L = argG;
    var M = 0;
    var L = L[M];
    var M = 1;
    var L = L[M];
    var K = [K,L];
    var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
    var K = - K;
    var J = J + K;
    var K = 1;
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 10;
  var K = K[L];
  var I = [I,J,K];
  var I = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(I);
  var H = H < I;
  var H = ! H;
  if (H) {
    var H = argG;
    var I = 0;
    var H = H[I];
    var I = 2;
    var H = H[I];
    var I = argG;
    var J = 0;
    var I = I[J];
    var J = 7;
    var I = I[J];
    var H = H + I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 2;
  var I = I[J];
  var J = 0;
  var I = I < J;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 4;
  var K = K[L];
  var J = J > K;
  var I = I || J;
  if (I) {
    var I = 90;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 4;
  var K = K[L];
  var L = 15;
  var L = - L;
  var K = K + L;
  var J = J > K;
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = 100;
    var L = 2;
    var K = K / L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = 0;
  var L = L < M;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 4;
  var N = N[O];
  var M = M > N;
  var L = L || M;
  if (L) {
    var L = 50;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = argG;
    var O = 2;
    var N = N[O];
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 1;
  var O = O[P];
  var N = [N,O];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var N = - N;
  var M = M + N;
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = argG;
    var O = 2;
    var N = N[O];
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = argG;
      var P = 2;
      var O = O[P];
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 1;
    var P = P[Q];
    var O = [O,P];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var O = - O;
    var N = N + O;
    var O = 1;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = 0;
  var O = O < P;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = argG;
  var R = 4;
  var Q = Q[R];
  var P = P > Q;
  var O = O || P;
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 10;
  var P = P[Q];
  var N = [N,O,P];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var M = M < N;
  var M = ! M;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 4;
    var M = M[N];
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 6;
    var N = N[O];
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 4;
  var N = N[O];
  var K = [K,L,M,N];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 25;
    var M = - M;
    var L = L + M;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = (argH) => {
    var N = argH;
    var O = argG;
    var P = 1;
    var O = O[P];
    if (O) {
      var O = new Set([]);
      tmp = O;
    } else tmp = null;
    var O = tmp;
    var P = argG;
    var Q = 6;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 0;
      var P = P[Q];
      var Q = 12;
      var P = P[Q];
      var Q = argG;
      var R = 5;
      var Q = Q[R];
      var Q = new Set([Q]);
      var P = new Set([...P, ...Q]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 7;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q].filter(x => !R.has(x)));
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 12;
    var R = R[S];
    var O = [O,P,Q,R];
    var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
    var N = O.has(N);
    return N;
  }
  var N = 38;
  var M = M(N);
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 11;
  var N = N[O];
  var O = 100;
  var P = 25;
  var P = - P;
  var O = O + P;
  var N = N < O;
  var M = M && N;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 11;
    var M = M[N];
    var N = 2;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 40;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 0;
  var O = O > P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var O = - O;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var K = K > L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = 50;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 1;
  var P = P[Q];
  var O = [O,P];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var O = - O;
  var N = N + O;
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = 0;
  var P = P < Q;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = argG;
  var S = 4;
  var R = R[S];
  var Q = Q > R;
  var P = P || Q;
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 10;
  var Q = Q[R];
  var O = [O,P,Q];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var N = N < O;
  var N = ! N;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 4;
    var N = N[O];
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 6;
    var O = O[P];
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 4;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 38;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 11;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 11;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 40;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 11;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 11;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = 25;
  var M = M + N;
  var L = L < M;
  var K = K && L;
  var J = J && K;
  if (J) {
    var J = argG;
    var K = 4;
    var J = J[K];
    var K = 15;
    var K = - K;
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = 15;
  var K = K < L;
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 100;
    var M = 2;
    var L = L / M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 4;
  var O = O[P];
  var N = N > O;
  var M = M || N;
  if (M) {
    var M = 50;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 2;
  var N = N[O];
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 1;
  var P = P[Q];
  var O = [O,P];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var O = - O;
  var N = N + O;
  var O = argG;
  var P = 1;
  var O = O[P];
  if (O) {
    var O = argG;
    var P = 2;
    var O = O[P];
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = argG;
      var Q = 2;
      var P = P[Q];
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 0;
    var Q = Q[R];
    var R = 1;
    var Q = Q[R];
    var P = [P,Q];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var P = - P;
    var O = O + P;
    var P = 1;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 2;
  var P = P[Q];
  var Q = 0;
  var P = P < Q;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = argG;
  var S = 4;
  var R = R[S];
  var Q = Q > R;
  var P = P || Q;
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 10;
  var Q = Q[R];
  var O = [O,P,Q];
  var O = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(O);
  var N = N < O;
  var N = ! N;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 4;
    var N = N[O];
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 6;
    var O = O[P];
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 4;
  var O = O[P];
  var L = [L,M,N,O];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 25;
    var N = - N;
    var M = M + N;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = (argH) => {
    var O = argH;
    var P = argG;
    var Q = 1;
    var P = P[Q];
    if (P) {
      var P = new Set([]);
      tmp = P;
    } else tmp = null;
    var P = tmp;
    var Q = argG;
    var R = 6;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 0;
      var Q = Q[R];
      var R = 12;
      var Q = Q[R];
      var R = argG;
      var S = 5;
      var R = R[S];
      var R = new Set([R]);
      var Q = new Set([...Q, ...R]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 7;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R].filter(x => !S.has(x)));
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 12;
    var S = S[T];
    var P = [P,Q,R,S];
    var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
    var O = P.has(O);
    return O;
  }
  var O = 87;
  var N = N(O);
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 0;
  var O = O[P];
  var P = 100;
  var Q = 25;
  var Q = - Q;
  var P = P + Q;
  var O = O < P;
  var N = N && O;
  if (N) {
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 0;
    var N = N[O];
    var O = 2;
    var N = N + O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 83;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P > Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 0;
    var O = O[P];
    var P = 2;
    var P = - P;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var L = L > M;
  var M = argG;
  var N = 1;
  var M = M[N];
  if (M) {
    var M = 100;
    var N = 2;
    var M = M / N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 2;
  var N = N[O];
  var O = 0;
  var N = N < O;
  var O = argG;
  var P = 0;
  var O = O[P];
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 4;
  var P = P[Q];
  var O = O > P;
  var N = N || O;
  if (N) {
    var N = 50;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = argG;
  var P = 2;
  var O = O[P];
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 1;
  var Q = Q[R];
  var P = [P,Q];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var P = - P;
  var O = O + P;
  var P = argG;
  var Q = 1;
  var P = P[Q];
  if (P) {
    var P = argG;
    var Q = 2;
    var P = P[Q];
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = argG;
      var R = 2;
      var Q = Q[R];
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 0;
    var R = R[S];
    var S = 1;
    var R = R[S];
    var Q = [Q,R];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var Q = - Q;
    var P = P + Q;
    var Q = 1;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 2;
  var Q = Q[R];
  var R = 0;
  var Q = Q < R;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 2;
  var R = R[S];
  var S = argG;
  var T = 4;
  var S = S[T];
  var R = R > S;
  var Q = Q || R;
  if (Q) {
    var Q = argG;
    var R = 2;
    var Q = Q[R];
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 2;
      var R = R[S];
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 0;
    var S = S[T];
    var T = 1;
    var S = S[T];
    var R = [R,S];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var R = - R;
    var Q = Q + R;
    var R = 1;
    var Q = Q + R;
    tmp = Q;
  } else tmp = null;
  var Q = tmp;
  var R = argG;
  var S = 0;
  var R = R[S];
  var S = 10;
  var R = R[S];
  var P = [P,Q,R];
  var P = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(P);
  var O = O < P;
  var O = ! O;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 4;
    var O = O[P];
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 6;
    var P = P[Q];
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 4;
  var P = P[Q];
  var M = [M,N,O,P];
  var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
  var N = argG;
  var O = 1;
  var N = N[O];
  if (N) {
    var N = 100;
    var O = 25;
    var O = - O;
    var N = N + O;
    var O = 2;
    var N = N / O;
    tmp = N;
  } else tmp = null;
  var N = tmp;
  var O = (argH) => {
    var P = argH;
    var Q = argG;
    var R = 1;
    var Q = Q[R];
    if (Q) {
      var Q = new Set([]);
      tmp = Q;
    } else tmp = null;
    var Q = tmp;
    var R = argG;
    var S = 6;
    var R = R[S];
    if (R) {
      var R = argG;
      var S = 0;
      var R = R[S];
      var S = 12;
      var R = R[S];
      var S = argG;
      var T = 5;
      var S = S[T];
      var S = new Set([S]);
      var R = new Set([...R, ...S]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 7;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S].filter(x => !T.has(x)));
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 0;
    var T = T[U];
    var U = 12;
    var T = T[U];
    var Q = [Q,R,S,T];
    var Q = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(Q);
    var P = Q.has(P);
    return P;
  }
  var P = 87;
  var O = O(P);
  var P = argG;
  var Q = 0;
  var P = P[Q];
  var Q = 0;
  var P = P[Q];
  var Q = 100;
  var R = 25;
  var R = - R;
  var Q = Q + R;
  var P = P < Q;
  var O = O && P;
  if (O) {
    var O = argG;
    var P = 0;
    var O = O[P];
    var P = 0;
    var O = O[P];
    var P = 2;
    var O = O + P;
    tmp = O;
  } else tmp = null;
  var O = tmp;
  var P = (argH) => {
    var Q = argH;
    var R = argG;
    var S = 1;
    var R = R[S];
    if (R) {
      var R = new Set([]);
      tmp = R;
    } else tmp = null;
    var R = tmp;
    var S = argG;
    var T = 6;
    var S = S[T];
    if (S) {
      var S = argG;
      var T = 0;
      var S = S[T];
      var T = 12;
      var S = S[T];
      var T = argG;
      var U = 5;
      var T = T[U];
      var T = new Set([T]);
      var S = new Set([...S, ...T]);
      tmp = S;
    } else tmp = null;
    var S = tmp;
    var T = argG;
    var U = 7;
    var T = T[U];
    if (T) {
      var T = argG;
      var U = 0;
      var T = T[U];
      var U = 12;
      var T = T[U];
      var U = argG;
      var V = 5;
      var U = U[V];
      var U = new Set([U]);
      var T = new Set([...T].filter(x => !U.has(x)));
      tmp = T;
    } else tmp = null;
    var T = tmp;
    var U = argG;
    var V = 0;
    var U = U[V];
    var V = 12;
    var U = U[V];
    var R = [R,S,T,U];
    var R = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(R);
    var Q = R.has(Q);
    return Q;
  }
  var Q = 83;
  var P = P(Q);
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q > R;
  var P = P && Q;
  if (P) {
    var P = argG;
    var Q = 0;
    var P = P[Q];
    var Q = 0;
    var P = P[Q];
    var Q = 2;
    var Q = - Q;
    var P = P + Q;
    tmp = P;
  } else tmp = null;
  var P = tmp;
  var Q = argG;
  var R = 0;
  var Q = Q[R];
  var R = 0;
  var Q = Q[R];
  var N = [N,O,P,Q];
  var N = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(N);
  var O = 25;
  var N = N + O;
  var M = M < N;
  var L = L && M;
  var K = K && L;
  if (K) {
    var K = 15;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var G = [G,H,I,J,K,L];
  var G = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(G);
  var H = argG;
  var I = 1;
  var H = H[I];
  if (H) {
    var H = 100;
    var I = 2;
    var H = H / I;
    tmp = H;
  } else tmp = null;
  var H = tmp;
  var I = argG;
  var J = 0;
  var I = I[J];
  var J = 2;
  var I = I[J];
  var J = 0;
  var I = I < J;
  var J = argG;
  var K = 0;
  var J = J[K];
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 4;
  var K = K[L];
  var J = J > K;
  var I = I || J;
  if (I) {
    var I = 50;
    tmp = I;
  } else tmp = null;
  var I = tmp;
  var J = argG;
  var K = 2;
  var J = J[K];
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = argG;
    var L = 2;
    var K = K[L];
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 1;
  var L = L[M];
  var K = [K,L];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var K = - K;
  var J = J + K;
  var K = argG;
  var L = 1;
  var K = K[L];
  if (K) {
    var K = argG;
    var L = 2;
    var K = K[L];
    var L = argG;
    var M = 1;
    var L = L[M];
    if (L) {
      var L = argG;
      var M = 2;
      var L = L[M];
      tmp = L;
    } else tmp = null;
    var L = tmp;
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 1;
    var M = M[N];
    var L = [L,M];
    var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
    var L = - L;
    var K = K + L;
    var L = 1;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 2;
  var L = L[M];
  var M = 0;
  var L = L < M;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = argG;
  var O = 4;
  var N = N[O];
  var M = M > N;
  var L = L || M;
  if (L) {
    var L = argG;
    var M = 2;
    var L = L[M];
    var M = argG;
    var N = 1;
    var M = M[N];
    if (M) {
      var M = argG;
      var N = 2;
      var M = M[N];
      tmp = M;
    } else tmp = null;
    var M = tmp;
    var N = argG;
    var O = 0;
    var N = N[O];
    var O = 1;
    var N = N[O];
    var M = [M,N];
    var M = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(M);
    var M = - M;
    var L = L + M;
    var M = 1;
    var L = L + M;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 10;
  var M = M[N];
  var K = [K,L,M];
  var K = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(K);
  var J = J < K;
  var J = ! J;
  if (J) {
    var J = argG;
    var K = 0;
    var J = J[K];
    var K = 4;
    var J = J[K];
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 6;
    var K = K[L];
    var J = J + K;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 4;
  var K = K[L];
  var H = [H,I,J,K];
  var H = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(H);
  var G = [G,H];
  var H = 5;
  var G = [G,H];
  var F = F(G);
  var G =  args => {
  var x = args[0][0] * SCHAAL;
  var y = (100 - args[0][1]) * SCHAAL;
  var t = args[1];
	//if (typeof t == "object)
//		t = [...t]
//	alert("t = " + typeof t);
  return context => {
    context.fillText(t,x,y);
    return context;
  }
	} ;
  var H = 90;
  var I = 9;
  var I = - I;
  var H = H + I;
  var I = 90;
  var H = [H,I];
  var I = x => (typeof(x)=="object" && x.has && "{"+[...x].toString()+"}") || JSON.stringify(x) || (x || "niets").toString();
  var J = argG;
  var K = 1;
  var J = J[K];
  if (J) {
    var J = 0;
    tmp = J;
  } else tmp = null;
  var J = tmp;
  var K = argG;
  var L = 0;
  var K = K[L];
  var L = 2;
  var K = K[L];
  var L = argG;
  var M = 4;
  var L = L[M];
  var K = K > L;
  if (K) {
    var K = argG;
    var L = 0;
    var K = K[L];
    var L = 3;
    var K = K[L];
    var L = 1;
    var K = K + L;
    tmp = K;
  } else tmp = null;
  var K = tmp;
  var L = argG;
  var M = 0;
  var L = L[M];
  var M = 3;
  var L = L[M];
  var J = [J,K,L];
  var J = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(J);
  var I = typeof(I) == "function" ? I(J) : I[J];
  var H = [H,I];
  var G = G(H);
  var H =  args => {
  var x = args[0][0] * SCHAAL;
  var y = (100 - args[0][1]) * SCHAAL;
  var t = args[1];
	//if (typeof t == "object)
//		t = [...t]
//	alert("t = " + typeof t);
  return context => {
    context.fillText(t,x,y);
    return context;
  }
	} ;
  var I = 90;
  var J = 2;
  var J = - J;
  var I = I + J;
  var J = 90;
  var I = [I,J];
  var J = 45;
  var J = String.fromCharCode(J);
  var I = [I,J];
  var H = H(I);
  var I =  args => {
  var x = args[0][0] * SCHAAL;
  var y = (100 - args[0][1]) * SCHAAL;
  var t = args[1];
	//if (typeof t == "object)
//		t = [...t]
//	alert("t = " + typeof t);
  return context => {
    context.fillText(t,x,y);
    return context;
  }
	} ;
  var J = 90;
  var K = 3;
  var J = J + K;
  var K = 90;
  var J = [J,K];
  var K = x => (typeof(x)=="object" && x.has && "{"+[...x].toString()+"}") || JSON.stringify(x) || (x || "niets").toString();
  var L = argG;
  var M = 1;
  var L = L[M];
  if (L) {
    var L = 0;
    tmp = L;
  } else tmp = null;
  var L = tmp;
  var M = argG;
  var N = 0;
  var M = M[N];
  var N = 2;
  var M = M[N];
  var N = 0;
  var M = M < N;
  if (M) {
    var M = argG;
    var N = 0;
    var M = M[N];
    var N = 8;
    var M = M[N];
    var N = 1;
    var M = M + N;
    tmp = M;
  } else tmp = null;
  var M = tmp;
  var N = argG;
  var O = 0;
  var N = N[O];
  var O = 8;
  var N = N[O];
  var L = [L,M,N];
  var L = ((alts) => { for (var i=0; i<alts.length; i++) {  var alt = alts[i]; if (alt != null) {return alt;} } })(L);
  var K = typeof(K) == "function" ? K(L) : K[L];
  var J = [J,K];
  var I = I(J);
  var D = [D,E,F,G,H,I];
  var C = C(D);
  var B = [B,C];
  return B;
}
return A;