; TUTORIAL 1.1 --- Taal
; Taal werkt met objecten en feiten.
; Een object is bijvoorbeeld "3" of "uit".
; "3" is gewoon een getal,
; "uit" is het uitvoerscherm.
; Een feit is "uit = 3".
; Dit brengt ons bij het eerste voorbeeld:
uit = 3

; Je kan variabelen maken met "a = 2"
a = 2
uit = a

; ook kan je "+" gebruiken
a = 2
b = 3
uit = a + b

; de keerfunctie (·) schrijf je met sterretje
a = 1111
b = 1111
uit = a · b

; een if-statement is ook een geldig feit.
; In de if-statement kan je andere feiten
; neerzetten.
; Volgens mij kun je geen if-statements in
; if-statements zetten
a = 21 / 8
als a > 2 dan
	uit = "21/8 > 2"
eind

; met "anders" kun je aangeven
; welke feiten moeten gebeuren als
;de voorwaarde (a > 3) niet voldaan is
a = 21 / 8
als a > 3 dan
	uit = "21/8 > 3"
anders
	uit = "21/8 < 3"
eind

; 1.2 --- Lijsten
; een lijst is een rij aan waardes
lijst = [1,2,3]
uit = lijst

; je kan ze combineren met "‖" (typ ||)
a = [1,2]
b = [3,4]
uit = a ‖ b

; je kan het eerste element uit de lijst halen
; met lijst(0), tweede met lijst(1), enz.
a = [1,2,3]
uit = a(0)

; je kan ook "_0" typen om "₀" te krijgen.
; a₀ is het eerste element uit a.
a = [1,2,3]
uit = a₀

; met 0..10 krijg je een reeks van 0 tot 10.
; NB: tót 10, dus 10 is uitgezonderd
n = 10
uit = 0 .. n

; met "i : 0..10" geef je aan dat "i" in de
; lijst 0 tot 10 zit.
; Hiermee kun je makkelijk lijsten vullen.
i: 0..10
uit(i) = 3 · i

; Met "×" (typ xx) maak je een cartesisch product
; tussen lijsten.
a = 0..3
b = 10..13
uit = a × b

; 1.3 --- Tupels
; Een tupel is een meervoud aan waardes,
; bijvoorbeeld (2,3). Dit tupel bevat
; de elementen 2 en 3.
; Je kan ze gebruiken bijvoorbeeld
; als positie.
x = 9
y = 5
uit = (x, y)

; de elementen kan je bereiken net als
; bij een lijst.
i = 2
tupel = (0,1,2)
uit = tupel(i)

; 1.3 --- Functies
; Tot nu toe hebben we standaardfuncties gebruikt
; zoals plus en keer. We kunnen ook onze eigen
; functies maken met "→".
; f = x → x + 1
; geeft aan dat f een functie is die "x" naar "x + 1"
; mapt.
; Dit betekent dat f(x) = x + 1.
; Dus f(0) = 1, f(3) = f(4),  f(-100) = -99
f = x → x + 1
uit = f(3)

; Je kan functies aan elkaar linken met "∘"
; (typ als apenstaartje)
; "f ∘ g" betekent: doe eerst f, dan g.
; wanneer "f = h ∘ g" dan is f(x) = g(h(x))
; "sin ∘ cos" is dus een functie voor x
; die de cosinus van de sinus van x returnt.
; In dit voorbeeld voegt g 1 toe aan zijn invoer,
; en h voegt twee toe.
g = x → x + 1
h = y → y + 2
f = g ∘ h
uit = f(0)


; hierzo wordt +1 eerst toegepast,
; daarna ·2, dan nog een keer ·2.
; Dus van links naar rechts.
; dit is hetzelfde als
; uit = plus(mul(mul(2))).
mul = x → x · 2
plus = y → y + 1
f = plus ∘ mul ∘ mul
uit = f(2)

; De standaardfuncties kun je gebruiken
; door er haakjes omheen te zetten.
; f = (+) is de plusfunctie
; van het type (getal,getal) → getal.
; (getal,getal) is een tupel met
; twee getallen erin.
a = (1,2)
uit = (+) a

; Je kan ze ook aan elkaar linken
f = (+) ∘ (-)
uit = f(1,2)

; 1.3 --- Functioneel
; Sla dit hoofdstuk over als je geen
; programmeerkennis hebt.
; De functie "vouw" maakt een enkel
; element van een lijst door ze 
; met een functie met elkaar samen te
; voegen, van links naar rechts.
getallen = 1 .. 10
uit = getallen vouw (+)

; je kan vouw gebruiken met (∘) om een lijst van
; functies te linken:
f = [(+), sincos, (·)]
g = f vouw (∘)
uit = g(2,3)

; De functie "map" voert een functie
; op alle elementen van een collectie uit.
lijst = [1,2,3]
fn = x → x² ; typ met ^2
uit = lijst map fn

; 1.3 --- Sets
; Net als lijsten zijn sets objecten.
; in een set kan elk object maar 1x voorkomen.
; Schrijf als {1,2,3}
uit = {1,2,3}

; Sets kun je samenvoegen met UNIE.
; a UU b bevat alle elementen uit a en uit b.
a = {1,2}
b = {2,3}
uit = a UU b

; Om de doorsnede (gemeenschappelijke objecten)
; te krijgen gebruik je "ℕ"
a = {1,2}
b = {2,3}
uit = a ℕ b


; 1.3 --- Tekst
; Tekst is in taal een object als elk ander,
; geschreven als "tekst".
uit = "hoi"

; Tekst is een lijst van letters.
; Losse letters schrijf je met 'x'.
uit = 'x'

; Je kunt dus ook tekst te maken als volgt
h = 'h'
o = 'o'
i = 'i'
uit = [h, o, i, i, i]

; met tekst(i) kun je bij de i'de letter
a = "hoi"
uit = a(1)

; Met ‖ kon je lijsten samenvoegen:
; dit werkt evengoed op tekst.
a = "euro"
b = "pa"
uit = a ‖ b

; met de functie "tekst" kun je andere objecten
; naar tekst omzetten. "tekst(3)" is dus
; "3" als tekst.
a = 2
uit = "a=" ‖ tekst(a)


; 1.3 --- Liveheid
; Sommige objecten veranderen tijdens de duur
; van het programma.
; "looptijd" is bijvoorbeeld het aantal seconden
; sinds het programma is gestart.
uit = looptijd

; je kunt deze waarden gewoon als elke andere waarde
a = 3 + looptijd · 2
uit = tekst(a)

; "int" rond een getal af naar beneden
n = int(looptijd)
i: 0..n
uit(i) = i²

; andere live waarden zijn beschikbaar met
; "toetsLinks", "toetsRechts",
; "toetsOmhoog", "toetsOmlaag",
; "toetsW" etcetera.
; Deze representeren je toetsenbord
; toetsen: aan of uit.
uit = [toetsLinks, toetsRechts]

; je kan ook met "toetsLinksBegin" alleen
; het moment opvragen dat de toets ingedrukt
; wordt
uit = toetsLinksBegin

; 1.7 -- Variabelen
; Tot nu toe hebben we functies en live waarden
; gezien, maar nog geen makkelijke manier om
; complexe variabelen te maken (zoals mario's
; positie in Super Mario).
;
; Met "a := 0" maak je a variabel: aan het begin
; wordt a eenmalig op nul gezet.
a := looptijd
uit = a

; In if-statements kan je variabelen ook veranderen.
a := 0
als toetsSpatieBegin dan
	a := 1
eind
uit = a

; Je kan naar een vorige kopie van een variabele
; refereren met een enkele quote (a').
a := 0
als toetsSpatieBegin dan
	a := a' + 1
eind
uit = a

; 1.9 --- Canvas
; De functie "canvas" toont een canvas (interactief
; gebied) met vormen erin getekend.
; Hij neemt als argument een lijst van figuren.
; De functie cirkel(positie, straal) is zo'n figuur.
;
; De standaardgrootte van het canvas is 17 7/9 × 10
pos = (9,5)
straal = 1
cirk = cirkel(pos, straal)
figuren = [cirk]  ; lijst met 2 element
uit = canvas(figuren)

; Geleerde technieken combinerende kunnen we nu makkelijk
; tien cirkels tekenen
i: 0..10
figuren(i) = cirkel((i,i), 0.5)
uit = canvas(figuren)

; of tien cirkels naar de muis laten richten
i: 0..10
figuren(i) = cirkel((muisX/i,muisY/i), 0.5/i)
uit = canvas(figuren)
