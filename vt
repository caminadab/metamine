#!/usr/bin/luajit
package.path = package.path .. ";../?.lua"
require 'exp'
require 'rapporteer-syntax'
require 'bieb'

require 'getopt'
require 'lisp'
require 'vertaal'

require 'rapport'
require 'typeer'
require 'doe'

require 'bouw.genjs'
require 'bouw.genx64'

require 'bouw.focus'
require 'bouw.arch'
require 'bouw.codegen'
require 'bouw.assembleer'
require 'bouw.link'

opt,bronnen = getopt({...}, "u")

for i,bron in pairs(bronnen) do
	if bron:sub(-5) ~= '.code' then
		bronnen[i] = bron .. '.code'
	end
end

if #bronnen == 0 then
	print('geen invoer')
end

if opt.h or opt.help or #bronnen == 0 then
	print(
[[gebruik: vt [OPTIES...] [BESTANDEN...]
Vertaalt broncode naar applicaties.
Opties:
    -h, --help        print deze hulp
    -v, --verboos     meer uitvoer
    -g, --debug       genereer ontkeverinformatie
    -d, --doe         voer meteen uit
    -l, --lokale=CC	  stel lokale van broncode in (standaard NL)
    -u, --uitvoer=UIT	uitvoerbestand

    -i      					genereer intermediaire code
    -n, --naakt       compileer zonder stdbieb
    -j,	--javascript	compileer naar javascript
    -x,	--demo				compileer naar demo
		
    -O								optimaliseer uitvoer NIET

    -S                genereer assembly-code
    -R                genereer uitgebreid rapport

    -B                print syntaxinformatie
    -R                print architectuurspecifieke boom
    -G                print kennisgraaf
    -K                print voorgekauwde (opgeloste) kennis

    -Q                print oplosinformatie
    -W                print opgeloste waarde
    -D                print opgeloste defunc

    -T                print types
    -Y                print typegraaf

    -D                print delta-tijd informatie
    -C                print de controlegraaf

    -I                print intermediaire code
    -J                print kijkgat code
    -L                print elke uitgevoerde instructie

    -F                print uitvoer na kijkgatoptimalisaties
    -A                print assemblycode
    -H                print linker info
    -M                print geheugenallocatie info
    -B                print broncode
    -r, --rapport     genereer rapport
]])
	return
end

--bronnen[#bronnen+1] = 'bieb/wisk.code'
--bronnen[#bronnen+1] = 'bieb/x64.code'
--bronnen[#bronnen+1] = 'bieb/linux-syscalls.code'

if not opt.n then
	bronnen[#bronnen+1] = 'bieb/std.code'
else
	bronnen[#bronnen+1] = 'bieb/n.code'
end

if opt.d or opt.doe then
	doemeteen = true
end
if opt.v or opt.verboos then
	verboos = true
end
if opt.j then opt.javascript = true end

if opt.R then verbozeRapport = true end
if opt.S then verbozeSyntax = true end
if opt.D then verbozeDeductie = true end
if opt.K then verbozeKennis = true end
if opt.W then verbozeOplos = true end
if opt.D then verbozeDefunc = true end
if opt.G then verbozeKennisgraaf = true end
if opt.W then verbozeWaarde = true end
if opt.C then verbozeControle = true end
if opt.I then verbozeIntermediair = true end
if opt.J then verbozeKijkgat = true end
if opt.A then verbozeAsm = true end
if opt.H then verbozeLinker = true end
if opt.M then verbozeOpslag = true end
if opt.B then verbozeBroncode = true end

if opt.T then verbozeTypes = true end
if opt.Y then verbozeTypegraaf = true end
if opt.i or opt.n then opt.veilig = true end

if opt.g or opt.debug or opt.ontkever then
	opt.g = true
	ontkever = true
end

local code = table.concat(map(bronnen, lees), '\n')

if verbozeBroncode then
	print('=== BRONCODE ===')
	print(code)
	print()
end

if verbozeSyntax then
	print('=== SYNTAX ===')
	local asb = ontleed(code)
	print(combineer(asb))
	print()
end

local app,fouten = vertaal(code, bronnen[1])
assert(app or #fouten > 0)

-- foutjuhhs
if #fouten > 0 then
	for i,fout in ipairs(fouten) do
		print(fout2ansi(fout))
	end
end
if not app then
	return
end

if verbozeControle then
	print('=== CONTROLEGRAAF ===')
	print(app)
	print()
end

if verbozeIntermediair then
	print('=== INTERMEDIAIRE CODE ===')
	for i, stat in ipairs(app) do
		print(combineer(stat))
	end
	print()
end

-- nieuwe lage JS
if opt.javascript then
	uit = genjs(app)
	file('a.js', '\nperformance = {now: function() { return 0; }}\n'..uit)--{now: new Date().getTime()}')
	print(uit)
	if opt.d then
		os.execute('js a.js')
	end
	return
end


if opt.i then
	-- doe
	if opt.d then
		if opt.L then
			print('=== START ===')
		end
		local exp = doe(app)
		if verbozeIntermediair then
			print()
		end

	-- print
	else
		for i,stat in ipairs(app) do
			print(combineer(stat))
		end
	end
	return
end

local asm = genx64(cfg)
if opt.S then
	--file('a.s', asm)
end
local elf = link(assembleer(asm, 'a'), 'a')
file('a.elf', elf)
os.execute('chmod +x a.elf')
if doemeteen then
	print('== START ==')
	os.execute('./a.elf')
end
