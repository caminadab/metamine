#!/usr/bin/lua
package.path = package.path .. ";../?.lua"

require 'getopt'
require 'lisp'

require 'vertaal'
require 'doe'
require 'rapport'

local opt,bronnen = getopt({...}, "u")

for i,bron in pairs(bronnen) do
	if bron:sub(-5) ~= '.code' then
		bronnen[i] = bron .. '.code'
	end
end

if #bronnen == 0 then
	print('geen invoer')
end

if opt.h or opt.help or #bronnen == 0 then
	print(
[[gebruik: vt [OPTIES...] [BESTANDEN...]
Vertaalt broncode naar applicaties.
Opties:
    -h, --help        print deze hulp
    -d, --doe         voer meteen uit
    -s, --syntax 	  	print syntax
    -l, --lokale=CC	  stel lokale van broncode in (standaard NL)
    -u, --uitvoer=UIT	uitvoerbestand
    -v, --verboos     spraakzaam zijn
    -r, --rapport     genereer rapport
]])
	return
end

if opt.v or opt.verboos then
	verboos = true
end

if opt.s or opt.syntaxis then
	verboos = true
end

local ok,code = pcall(file, bronnen[1])
if not ok then print('bestand '..bronnen[1]..' niet gevonden') ; return end

-- rapporteer proces
if opt.r or opt.rapport then
	local html = rapport(code)
	file('rapport.html', html)
end


--local plan = vertaal(code, 'in', 'uit')
local asb = toexp(ontleed0(code))
assert(asb, 'syntaxfout')
local map,fout = oplos(asb)
assert(map, 'logicafout: '..tostring(fout))
local plan = map.standaarduitvoer

local uit
if opt.d or opt.doe then
	uit = string.char(table.unpack(doe0(plan)))
else
	--uit = bouw(plan)
	uit = tostring(toexp(plan))..'\n'
end
--uit = unlisp(uit)

local u = opt.u or opt.uitvoer
if u then
	file(u, uit)
else
	io.write(uit)
end
