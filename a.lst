   1              		.file	"a.c"
   2              		.intel_syntax noprefix
   3              	# GNU C17 (Debian 8.3.0-7) version 8.3.0 (x86_64-linux-gnu)
   4              	#	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   5              	
   6              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   7              	# meegegeven opties:  -imultiarch x86_64-linux-gnu a.c -masm=intel
   8              	# -mtune=generic -march=x86-64 -g -O0 -fverbose-asm
   9              	# ingeschakelde opties:  -fPIC -fPIE -faggressive-loop-optimizations
  10              	# -fasynchronous-unwind-tables -fauto-inc-dec -fchkp-check-incomplete-type
  11              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  12              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  13              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  14              	# -fchkp-use-wrappers -fcommon -fdelete-null-pointer-checks
  15              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  16              	# -ffp-int-builtin-inexact -ffunction-cse -fgcse-lm -fgnu-runtime
  17              	# -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  18              	# -fira-share-save-slots -fira-share-spill-slots -fivopts
  19              	# -fkeep-static-consts -fleading-underscore -flifetime-dse
  20              	# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
  21              	# -fplt -fprefetch-loop-arrays -freg-struct-return
  22              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  23              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  24              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  25              	# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
  26              	# -fshow-column -fshrink-wrap-separate -fsigned-zeros
  27              	# -fsplit-ivs-in-unroller -fssa-backprop -fstdarg-opt
  28              	# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math -ftree-cselim
  29              	# -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  30              	# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  31              	# -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -funwind-tables
  32              	# -fverbose-asm -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
  33              	# -malign-stringops -mavx256-split-unaligned-load
  34              	# -mavx256-split-unaligned-store -mfancy-math-387 -mfp-ret-in-387 -mfxsr
  35              	# -mglibc -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone
  36              	# -msse -msse2 -mstv -mtls-direct-seg-refs -mvzeroupper
  37              	
  38              		.text
  39              	.Ltext0:
  40              		.section	.rodata
  41              	.LC1:
  42 0000 25660A00 		.string	"%f\n"
  43              	.LC2:
  44 0004 25640A00 		.string	"%d\n"
  45              		.text
  46              		.globl	main
  48              	main:
  49              	.LFB0:
  50              		.file 1 "a.c"
   1:a.c           **** #include <math.h>
   2:a.c           **** #include <stdio.h>
   3:a.c           **** 
   4:a.c           **** int main() {
  51              		.loc 1 4 12
  52              		.cfi_startproc
  53 0000 55       		push	rbp	#
  54              		.cfi_def_cfa_offset 16
  55              		.cfi_offset 6, -16
  56 0001 4889E5   		mov	rbp, rsp	#,
  57              		.cfi_def_cfa_register 6
  58 0004 4883EC30 		sub	rsp, 48	#,
  59              	# a.c:5: 	int i0 = 3;
   5:a.c           **** 	int i0 = 3;
  60              		.loc 1 5 6
  61 0008 C745FC03 		mov	DWORD PTR -4[rbp], 3	# i0,
  61      000000
  62              	# a.c:6: 	float f0 = (float)i0;
   6:a.c           **** 	float f0 = (float)i0;
  63              		.loc 1 6 8
  64 000f F30F2A45 		cvtsi2ss	xmm0, DWORD PTR -4[rbp]	# tmp99, i0
  64      FC
  65 0014 F30F1145 		movss	DWORD PTR -8[rbp], xmm0	# f0, tmp99
  65      F8
  66              	# a.c:7: 	f0 += 2.4;
   7:a.c           **** 	f0 += 2.4;
  67              		.loc 1 7 5
  68 0019 F30F5A4D 		cvtss2sd	xmm1, DWORD PTR -8[rbp]	# _1, f0
  68      F8
  69 001e F20F1005 		movsd	xmm0, QWORD PTR .LC0[rip]	# tmp100,
  69      00000000 
  70 0026 F20F58C1 		addsd	xmm0, xmm1	# _2, _1
  71 002a F20F5AD0 		cvtsd2ss	xmm2, xmm0	# tmp108, _2
  72 002e F30F1155 		movss	DWORD PTR -8[rbp], xmm2	# f0, tmp108
  72      F8
  73              	# a.c:8: 	printf("%f\n", f0);
   8:a.c           **** 	printf("%f\n", f0);
  74              		.loc 1 8 2
  75 0033 F30F5A45 		cvtss2sd	xmm0, DWORD PTR -8[rbp]	# _3, f0
  75      F8
  76 0038 488D3D00 		lea	rdi, .LC1[rip]	#,
  76      000000
  77 003f B8010000 		mov	eax, 1	#,
  77      00
  78 0044 E8000000 		call	printf@PLT	#
  78      00
  79              	# a.c:10: 	volatile int a = 10;
   9:a.c           **** 
  10:a.c           **** 	volatile int a = 10;
  80              		.loc 1 10 15
  81 0049 C745E40A 		mov	DWORD PTR -28[rbp], 10	# a,
  81      000000
  82              	# a.c:11: 	volatile int b = 8;
  11:a.c           **** 	volatile int b = 8;
  83              		.loc 1 11 15
  84 0050 C745E008 		mov	DWORD PTR -32[rbp], 8	# b,
  84      000000
  85              	# a.c:12: 	int c = pow(a, b);
  12:a.c           **** 	int c = pow(a, b);
  86              		.loc 1 12 10
  87 0057 8B45E0   		mov	eax, DWORD PTR -32[rbp]	# b.0_4, b
  88 005a F20F2AC8 		cvtsi2sd	xmm1, eax	# _5, b.0_4
  89 005e 8B45E4   		mov	eax, DWORD PTR -28[rbp]	# a.1_6, a
  90 0061 F20F2AC0 		cvtsi2sd	xmm0, eax	# _7, a.1_6
  91 0065 E8000000 		call	pow@PLT	#
  91      00
  92              	# a.c:12: 	int c = pow(a, b);
  93              		.loc 1 12 6
  94 006a F20F2CC0 		cvttsd2si	eax, xmm0	# tmp101, _8
  95 006e 8945F4   		mov	DWORD PTR -12[rbp], eax	# c, tmp101
  96              	# a.c:13: 	printf("%d\n", c);
  13:a.c           **** 	printf("%d\n", c);
  97              		.loc 1 13 2
  98 0071 8B45F4   		mov	eax, DWORD PTR -12[rbp]	# tmp102, c
  99 0074 89C6     		mov	esi, eax	#, tmp102
 100 0076 488D3D00 		lea	rdi, .LC2[rip]	#,
 100      000000
 101 007d B8000000 		mov	eax, 0	#,
 101      00
 102 0082 E8000000 		call	printf@PLT	#
 102      00
 103              	# a.c:15: 	volatile double A = 2.0;
  14:a.c           **** 
  15:a.c           **** 	volatile double A = 2.0;
 104              		.loc 1 15 18
 105 0087 F20F1005 		movsd	xmm0, QWORD PTR .LC3[rip]	# tmp103,
 105      00000000 
 106 008f F20F1145 		movsd	QWORD PTR -40[rbp], xmm0	# A, tmp103
 106      D8
 107              	# a.c:16: 	volatile double B = 3.0;
  16:a.c           **** 	volatile double B = 3.0;
 108              		.loc 1 16 18
 109 0094 F20F1005 		movsd	xmm0, QWORD PTR .LC4[rip]	# tmp104,
 109      00000000 
 110 009c F20F1145 		movsd	QWORD PTR -48[rbp], xmm0	# B, tmp104
 110      D0
 111              	# a.c:17: 	double C = A + B;
  17:a.c           **** 	double C = A + B;
 112              		.loc 1 17 15
 113 00a1 F20F104D 		movsd	xmm1, QWORD PTR -40[rbp]	# A.2_9, A
 113      D8
 114 00a6 F20F1045 		movsd	xmm0, QWORD PTR -48[rbp]	# B.3_10, B
 114      D0
 115              	# a.c:17: 	double C = A + B;
 116              		.loc 1 17 9
 117 00ab F20F58C1 		addsd	xmm0, xmm1	# tmp105, A.2_9
 118 00af F20F1145 		movsd	QWORD PTR -24[rbp], xmm0	# C, tmp105
 118      E8
 119              	# a.c:18: 	printf("%f\n", C);
  18:a.c           **** 	printf("%f\n", C);
 120              		.loc 1 18 2
 121 00b4 F20F1045 		movsd	xmm0, QWORD PTR -24[rbp]	# tmp106, C
 121      E8
 122 00b9 488D3D00 		lea	rdi, .LC1[rip]	#,
 122      000000
 123 00c0 B8010000 		mov	eax, 1	#,
 123      00
 124 00c5 E8000000 		call	printf@PLT	#
 124      00
 125              	# a.c:20: 	return 0;
  19:a.c           **** 
  20:a.c           **** 	return 0;
 126              		.loc 1 20 9
 127 00ca B8000000 		mov	eax, 0	# _25,
 127      00
 128              	# a.c:21: }
  21:a.c           **** }
 129              		.loc 1 21 1
 130 00cf C9       		leave	
 131              		.cfi_def_cfa 7, 8
 132 00d0 C3       		ret	
 133              		.cfi_endproc
 134              	.LFE0:
 136              		.section	.rodata
 137              		.align 8
 138              	.LC0:
 139 0008 33333333 		.long	858993459
 140 000c 33330340 		.long	1073951539
 141              		.align 8
 142              	.LC3:
 143 0010 00000000 		.long	0
 144 0014 00000040 		.long	1073741824
 145              		.align 8
 146              	.LC4:
 147 0018 00000000 		.long	0
 148 001c 00000840 		.long	1074266112
 149              		.text
 150              	.Letext0:
 151              		.file 2 "/usr/include/x86_64-linux-gnu/bits/types.h"
 152              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h"
 153              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 154              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 155              		.file 6 "/usr/include/math.h"
 156              		.file 7 "/usr/include/stdio.h"
 157              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
