<!DOCTYPE html>
<html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<head>
	<title>Taal</title>
	<link rel="stylesheet" href="index.css">
</head>
<body>

<div class="paneel">
	<button id="vorige">‚èÆ</button>
	<button id="engels" onclick="localStorage.setItem('cc', '{anderecc}'); document.location='{taallink}';"><img id="vlag" src="{taalvlag}"></img></button>
	<button id="speel">‚ñ∂</button>
	<button id="fullscreen" onclick="fullscreen()">‚á≤</button><!--‚õ∂-->
	<button id="volgende">‚è≠</button>
	<!--<button id="opnieuw">‚ü≤</button>-->
	<!--<button id="info">üõà</button>-->
</div>

<!-- in -->
<div class="in" tabindex="1">
	<textarea id="broncode" name="broncode">{laden}</textarea> 
</div>

<!-- uit! -->
<div id="uit" tabIndex="2" >
</div>

<div style="height:5; display: inline;"><input id="debug" type="checkbox"></input> debug </div>

<!-- grondstoffen -->
<div class="res">
	<img id="gras" src="data/gras.png">
	<img id="muur" src="data/muur.png">
	<img id="dodo" src="data/dodo.png">
</div>

</body>
<link rel="stylesheet" href="lib/slang.css">
<link rel="stylesheet" href="lib/codemirror.css">

<script src="lib/fastclick.js"></script>
<script src="lib/codemirror.js"></script>
<script src="lib/addon/edit/matchbrackets.js"></script>
<script src="lib/addon/selection/active-line.js"></script>
<script src="lib/addon/search/search.js"></script>
<script src="lib/addon/search/searchcursor.js"></script>
<script src="lib/taal.js"></script>
<script src="lib/vim.js"></script>
<script src="webgl.js"></script>
<script>

	// autoherleid engels
	if (localStorage.getItem("cc") != "{cc}") {
		localStorage.setItem("cc", "{anderecc}");
		document.location='{taallink}';
	}

	// demoindex

	var cc = ("{cc}" == "nl") ? "" : ".en";

	var demoindex = 0;
	var demos = [ 'salvobal', 'pong', 'buis', 'cirkels', 'paint',
		'pe1', 'pe2', 'pe3', 'pe4', 'pe5', 'pe6' ] ;
	var uit = document.getElementById('uit');

	var speelknop = document.getElementById("speel");
	var vorigeknop = document.getElementById("vorige");
	var volgendeknop = document.getElementById("volgende");
	var cknop = '#012ED4';
	var laadbalk = document.getElementById("laadbalk");
	var js = document.getElementById("js");

	var preview = document.createElement("div", "preview");
	preview.className = "preview";
	var stop = true;
	var wraps = document.getElementsByClassName("CodeMirror-wrap");

	// fotos
	var gras = document.createElement('img');
	var muur = document.createElement('img');
	var dodo = document.createElement('img');
	var debug = document.getElementById('debug');
	gras.setAttribute('src', 'res/gras.png');
	muur.setAttribute('src', 'res/muur.png');
	dodo.setAttribute('src', 'res/dodo.png');
	//var gras = document.getElementById('gras');
	//var muur = document.getElementById('muur');
	//var dodo = document.getElementById('dodo');
	var fotos = [gras, muur, dodo];
	var naam;

	function toString(obj) {
		if (typeof(obj) == "string") {
			return obj;
		} else if (typeof(obj) == "function") {
			return '<pre>' + obj.toString() + '</pre>';
		} else if (obj == null) {
			return 'niets';
		} else if (Array.isArray(obj)) {
			return "["+obj.map(toString)+"]";
		} else if (typeof(obj)=="object" && obj.has) {
			return "{"+[...obj].toString()+"}";
		} else if (typeof(obj) == "number") {
			return (Math.floor(obj*1000) / 1000).toString();
		} else {
			var j = JSON.stringify(obj);
			if (j)
				return j;
			if (obj)
				return obj.toString();
			else
				return 'niets';
		}
	}

	/*setInterval(x => {
		if (window.cache && window.naam2index && naam && !stop)
			if (naam2index[naam])
				preview.innerHTML = toString(cache[naam2index[naam]]);
	}, 1000/60);*/


	function playfunc() {
		// suspense...
		speelknop.style.backgroundColor = '#000E42';
		
		var path = '/vt';
		if (debug.checked)
			path = '/vt/debug';

		fetch(path, {method: "POST", body: editor.getValue()})
			.then(x => x.json())
			.then(j => {
				if (j.fouten.length > 0) {
					setErrors(j.fouten);
					onerror();
					return;
				}
				naam2index = j.naam2index;

				stop = false;

				// debug info
				wraps[0].onmousemove = (ev) => {
					var pos = editor.coordsChar({left: ev.clientX, top: ev.clientY});
					var token = editor.getTokenAt(pos);

					var widgetpos = {line: pos.line, ch: token.start};
					if (token.type == "variable") {
						naam = token.string;
						if (naam2index[naam] && window.debug)
							preview.innerHTML = toString(cache[naam2index[naam]]);
						else {
							preview.innerHTML = '';
							naam = null;
						}
					}
					else {
						preview.innerHTML = '';
						naam = null;
					}
					editor.addWidget(widgetpos, preview);
				};

				try {
					// context
					SCHAAL = 7.2;
					var context;
					var uitBreedte = 178;

					function setcontext(transform) {
						if (!context) {
							var width = window.screen.width;
							var height = window.screen.height;
							SCHAAL = height/100;
							uitBreedte = width / height * 100;

							uit.innerHTML = '<canvas width="'+width+'" height="'+height+'"></canvas>'
							context = uit.children[0].getContext("2d");
							context.fillStyle = 'white';
							context.strokeStyle = 'white';
							context.font = '48px Arial';
							context.lineWidth = '4';
						}
						return transform(context);
					}

					var context3d;

					function setcontext3d(transform) {
						if (!context3d) {
							var width = window.screen.width;
							var height = window.screen.height;
							SCHAAL = height/100;
							uitBreedte = width / height * 100;

							uit.innerHTML = '<canvas width="'+width+'" height="'+height+'"></canvas>'
							context3d = uit.children[0].getContext("webgl");
							gl = context3d;
						}
						context = context3d;
						return transform(context3d);
					}

					var main = new Function("IN", j.js)();
					MAIN = main;
					var nu = new Date().getTime() / 1000;
					var vars = [];
					var uitvoer;

					var schermVerverst = false;
					var toetsCode = null;
					var toetsBegint = false;
					var toetsEindigt = false;
					var toetsBegin = (toetscode) => false;
					var toetsEind = (toetscode) => false;
					var muisBeweegt = false;
					var muisBeweegtNaar = null; //[0, 0];
					var muisKlikBegin = false;
					var muisKlikEind = false;
					var vroeger = nu;
					var dt = 0;

							//uit.innerHTML = (typeof(uitvoer)=="string" && uitvoer ||  || JSON.stringify(uitvoer) || (!uitvoer && 'niets') || '<pre>'+uitvoer.toString()+'</pre>';


					uit.onkeydown = (ev) => {
						var nu = new Date().getTime() / 1000;
						var toetsBegin = (keycode) => ev.keyCode == keycode;
						var toetsCode = ev.keyCode;
						var toetsBegint = true;
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

						vars = uv[0];
						uitvoer = uv[1];

						if (!context)
							uit.innerHTML = toString(uitvoer);

						return ev.keyCode > 96;
					};

					uit.onmousedown = (ev) => {
						var nu = new Date().getTime() / 1000;
						var muisBeweegt = true;
						var canvas = uit.children[0] || uit;
						var b = canvas.getBoundingClientRect();
						EV = ev;
						var muisX = (ev.clientX - b.left) / canvas.clientHeight * 100;
						var muisY = (ev.clientY - b.top) / canvas.clientHeight * 100;
						var muisY = 100 - muisY;
						var muisBeweegtNaar = [+muisX.toFixed(3), +muisY.toFixed(3)];
						var muisKlikBegin = true;
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

						vars = uv[0];
						uitvoer = uv[1];
						if (!context)
							uit.innerHTML = toString(uitvoer);
					};
						
					uit.onmouseup = (ev) => {
						var nu = new Date().getTime() / 1000;
						var muisBeweegt = true;
						var canvas = uit.children[0] || uit;
						var b = canvas.getBoundingClientRect();
						EV = ev;
						var muisX = (ev.clientX - b.left) / canvas.clientHeight * 100;
						var muisY = (ev.clientY - b.top) / canvas.clientHeight * 100;
						var muisY = 100 - muisY;
						var muisBeweegtNaar = [+muisX.toFixed(3), +muisY.toFixed(3)];
						var muisKlikEind = true;
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

						vars = uv[0];
						uitvoer = uv[1];
						if (!context)
							uit.innerHTML = toString(uitvoer);
					};

					uit.onmousemove = (ev) => {
						var nu = new Date().getTime() / 1000;
						muisBeweegt = true;
						var canvas = uit.children[0] || uit;
						var b = canvas.getBoundingClientRect();
						EV = ev;
						var muisX = (ev.clientX - b.left) / canvas.clientHeight * 100;
						var muisY = (ev.clientY - b.top) / canvas.clientHeight * 100;
						var muisY = 100 - muisY;
						var muisBeweegtNaar = [+muisX.toFixed(3), +muisY.toFixed(3)];
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

						vars = uv[0];
						uitvoer = uv[1];
						if (!context)
							uit.innerHTML = toString(uitvoer);

						return ev.keyCode > 96;
					};
						

					uit.onkeyup = (ev) => {
						var nu = new Date().getTime() / 1000;
						var toetsEind = (keycode) => ev.keyCode == keycode;
						var toetsCode = ev.keyCode;
						var toetsEindigt = true;
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

						vars = uv[0];
						uitvoer = uv[1];
						if (!context)
							uit.innerHTML = toString(uitvoer);

						return ev.keyCode > 96;
					};

					// start
					var uv = main([vars, true, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos]);

					if (!main)
						alert("Compilation error! " + j.js);

					vars = uv[0];
					uitvoer = uv[1];

					if (!context)
							uit.innerHTML = toString(uitvoer);

					var f = (ev) => {
						if (stop)
							return;
						var vroeger = nu;
						nu = new Date().getTime() / 1000;
						var dt = nu - vroeger;
						var schermVerverst = true;
						var uv = main([vars, false, nu, setcontext, setcontext3d, uitBreedte, schermVerverst, toetsCode, toetsBegint, toetsEindigt, toetsBegin, toetsEind, muisBeweegt, muisBeweegtNaar, muisKlikBegin, muisKlikEind, fotos, dt]);
						var na = new Date().getTime() / 1000;
						muisBeweegt = false;
						//if (na - nu > 0.02)
						//	console.log('traag..'+main);
						vars = uv[0];
						uitvoer = uv[1];

						if (!context) {
							uit.innerHTML = toString(uitvoer);
						}

						// debug
						if (window.cache && window.naam2index && naam && !stop)
							if (naam2index[naam])
								preview.innerHTML = toString(cache[naam2index[naam]]);

						if (!stop)
							requestAnimationFrame(f);
					}
					requestAnimationFrame(f);

					setTimeout(() => {
						speelknop.innerHTML = "‚ñ†";
						speelknop.style.background = 'green';
						speelknop.style.transitionDuration = '0.0s';
					}, 100);

					//uit.focus(); WAUW
				} catch (e) {
					onerror();
					uit.innerHTML = e + '<br>' + '<pre>' + j.js + '</pre>';
				}
			})
	}

	function stopfunc() {
		wraps[0].onmousemove = undefined;
		preview.innerHTML = '';
		stop = true;
		alertKlaar = false;
		setErrors([]);
		speelknop.innerHTML = "‚ñ∂";
		uit.onmousemove = undefined;
		uit.onkeydown = undefined;
		uit.onkeyup = undefined;
		uit.innerHTML = "";
		nieuw = null;
		tekst = null;
		speelknop.style.background = cknop;
		speelknop.style.transitionDuration = '1.0s';
	}

	// make fullscreen
	function fullscreen() {
		uit.children[0].requestFullscreen();
	}

	function playorstop() {
		if (stop) {
			playfunc();
		} else {
			stopfunc(); 
		}
	}
	
	speelknop.addEventListener("mousedown", playorstop);

	volgendeknop.addEventListener("mousedown", function() {
		stopfunc();
		setErrors([]);
		demoindex++;
		demoindex = Math.min(demoindex, demos.length-1);
		fetch('/ex/' + demos[demoindex] + cc + '.code?t=' + Math.random())
			.then(res => res.text())
			.then(data => {editor.setValue(data); playfunc();});
	});
	vorigeknop.addEventListener("mousedown", function() {
		stopfunc();
		setErrors([]);
		demoindex--;
		demoindex = Math.max(demoindex, 0);
		fetch('/ex/' + demos[demoindex] + cc + '.code?t=' + Math.random())
			.then(res => res.text())
			.then(data => {editor.setValue(data); playfunc();});
	});

	function onerror(e) {
		//stopfunc();
		stop = true;

		speelknop.style.background = 'red';
		speelknop.style.transitionDuration = '0.0s';

		setTimeout(function() {
			speelknop.style.background = cknop;
			speelknop.style.transitionDuration = '1.0s';
		}, 200);
	}

  var editor = CodeMirror.fromTextArea(document.getElementById("broncode"), {
    lineNumbers: false,
    matchBrackets: true,
    mode: "taal",
		indentUnit: 2,
		tabSize: 2,
		indentWithTabs: true,
		theme: 'slang',
		styleActiveLine: true,
		cursorScrollMargin: 10,
		lineWrapping: true,
		height: "1200px",

		extraKeys: {
			"Shift-Enter": function(cm) { stopfunc(); playfunc(); },
			"Shift-Esc": function(cm) { cm.setOption('keyMap', 'vim'); },
			"Ctrl-Y": function(cm) { cm.setOption('keyMap', 'vim'); },
		},
  });

	// lokaal opslaan
	if (localStorage.getItem("code")) {
		editor.setValue(localStorage.getItem("code"));
		playfunc();
	}
	else {
		editor.setValue("{laden}");
		fetch('/ex/' + demos[0] + cc + '.code')
			.then(resp => resp.text())
			.then(text => {editor.setValue(text); playfunc(); });
	}

	setInterval((x) => localStorage.setItem("code", editor.getValue()), 10000);


	//editor.setSize('50%', '300px');

	//editor.setSize(null, '800px');

	// zet de codemirror selectie
	function selecteer(loc) {
		editor.setSelection(loc.anchor, loc.head);
	}

	// jaja!
	var oldWidgets = [];
	var oldLineWidgets = [];

	// error.loc.anchor.line
	// error: {html, loc: {anchor: {line: int } } }
	function setErrors(errors) {

		// verwijder oude
		for (var i = 0; i < oldWidgets.length; i++)
			oldWidgets[i].parentNode.removeChild(oldWidgets[i]);
		oldWidgets = [];

		for (var i = 0; i < oldLineWidgets.length; i++)
			oldLineWidgets[i].clear();
		oldLineWidgets = [];
		
		for (var i = 0; i < errors.length; i++) {
			var error = errors[i];
				var inline = document.createElement("div");
					inline.innerHTML = '<b>&nbsp;<!--‚ö†--></b>';
					inline.classList.add("fouticoon");
					inline.style.fontFamily = 'Verdana';
					inline.style.position = 'absolute';
					inline.style.marginRight = '0px';
					inline.style.marginTop = '-18px';
					//inline.style.zIndex	= '9';
			oldWidgets.push(inline);
			var a = editor.addWidget(error.loc.anchor, inline, {above: true});
				var message = document.createElement("div");
					message.classList.add(error.type+"fout");
					message.classList.add("fout");
					message.innerHTML = error.html;

			var line = error.loc.anchor.line;
			if (line >= editor.lineCount() || line < 0)
				line = 0;
			var b = editor.addLineWidget(line, message);
			oldLineWidgets.push(b);
		}
	}

	// magische symbolen
	var magisch = {
		"*": "¬∑",
		"@": "‚àò",
		"!": "¬¨",
	};
	var bimagisch = {
		"II": "‚à©",
		"UU": "‚à™",
		"IN": "‚àà",
		"intersectie": "‚à©",
		"unie": "‚à™",
		"|_": "‚åä",
		"_|": "‚åã",
		"|^": "‚åà",
		"^|": "‚åâ",
		"||": "‚Äñ",
		"o/": "‚àÖ",
		"/o": "‚àÖ",
		"ooo": "‚àû",
		"tau": "œÑ",
		"som": "Œ£",
		"sqrt": "‚àö",
		"->": "‚Üí",
		"-->": "‚Ü¶",
		">=": "‚â•",
		"<=": "‚â§",
		"=<": "‚â§",
		"=/": "‚â†",
		"/=": "‚â†",
		"=>": "‚áí",
		"xx": "√ó",
		"^2": "¬≤",
		"^3": "¬≥",
		"_0": "‚ÇÄ",
		"_1": "‚ÇÅ",
		"_2": "‚ÇÇ",
		"_3": "‚ÇÉ",
		"^-1": "‚Åª¬π",
		"RR": "‚Ñù",
		"NN": "‚Ñï",
		"ZZ": "‚Ñ§",
		"BB": "ùîπ",
		"QQ": "‚Ñö",
		"HH": "‚Ñç",
	};
	editor.on("beforeChange", (cm,change) => {
		if (magisch[change.text]) {
			//cm.replaceRange(magisch[change.text], change.from, change.to);
			//return true;
			change.update(change.from,change.to,magisch[change.text]);
		}
		var ch = change.from.ch;
		var line = change.from.line;

		var zin = cm.doc.getLine(line);

		var l2 = zin.substr(Math.max(ch-1, 0), 1) + change.text;
		var l3 = zin.substr(Math.max(ch-2, 0), 2) + change.text;
		var l4 = zin.substr(Math.max(ch-3, 0), 3) + change.text;
		var l5 = zin.substr(Math.max(ch-4, 0), 4) + change.text;
		var l6 = zin.substr(Math.max(ch-5, 0), 5) + change.text;
		var l7 = zin.substr(Math.max(ch-6, 0), 6) + change.text;

		var a;
		var len;
		if (bimagisch[l2]) { len = 2; a = bimagisch[l2]; }
		if (bimagisch[l3]) { len = 3; a = bimagisch[l3]; }
		if (bimagisch[l4]) { len = 4; a = bimagisch[l4]; }
		if (bimagisch[l5]) { len = 5; a = bimagisch[l5]; }
		if (bimagisch[l6]) { len = 6; a = bimagisch[l6]; }
		if (bimagisch[l7]) { len = 7; a = bimagisch[l7]; }
	
		if (a)
		{
			change.update({ch:ch-len+1,line:line}, {ch:change.to.ch,line:change.to.line}, a);
		}
	});

	//var vim = document.getElementById("vim");
	//vim.addEventListener("click", function() { editor.setOption('keyMap', 'vim'); });
	// klik gewoon op Shift+Escape ...


</script>
</html>
