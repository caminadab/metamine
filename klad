fib(0) = 0
fib(1) = 1
fib(ℕ+2) = fib(ℕ+1) + fib(ℕ+0)

in → rec-status, rec-status → rec-status, rec-status → uit
fib = n → recⁿ₀

- recursief?
- vind start
- vind iteratief
- vind terugmap naar uit
- verifeer

Iteratief:
	fib(ℕ+2) = fib(ℕ+1) + fib(ℕ+0)
->
	(a,b,c) → (b,c,b+c)
	(a,b) → (b,a+b)

a = fib(ℕ+0)
b = fib(ℕ+1)
c = fib(ℕ+2)
	(a,b,c) → (b+c,a,b)


# kanaal
[2 0 1 0 1 0] → [[0 1] [] [0]]
(2 [0 1 0 1 0]) (

start = id
rec = a → a(1+a₀ .. #a)
;rec = (a,i) → (a,i+a₀+1)
uit = a → a(1..a₀)
fn = (a,n) → (start ∘ recⁿ ∘ uit)(a)

pakket(a,0) = a(1 + (0 .. a₀))
pakket(a,n+1) = pakket(a(1+a₀..#a), n)

Iteratief?:
	pakket(a,n+1) = pakket(a(1+a₀ .. #a), n)
→
	a → a(1+a₀ .. #a)

Inverteer?
	pakketten = pakketⁿ
	kanaal = cat(★ map (#☆ || ☆))
→
	
	;lengten = pakket → #(#pakket || pakket) = pakket → 1 + #pakket

	brok = #pakket || pakket
	#pakket = brok(0)
	pakket = brok(1..#brok)
	#brok = #(#pakket || pakket)
	#brok = 1 + brok(0)			#brok = 1 + #pakket
	brok = brokken(i)
	brokken = kanaal split #brok
	lengten(i) = #brokken(i)
	brok(i) = kanaal(begin(i)..eind(i))
	#pakket(i) = brok(i)(0) !!! hier gebeurt de aanname

	begin(0) = 0
	lengten(0) = 1 + #pakket(0) = 1 + kanaal(begin(0))
	eind(i) = begin(i) + lengten(i)
	begin(i+1) = eind(i)

	lengten(0) = 1 + 
	brok(0) = kanaal(begin(0)..eind(0))
	#pakket(0) = brokken(0)(0)

a = [2 0 1 0 1 0]
pakket(a,2) = [0]

# filos
x = p(p(0,1))
x : boom(lijst: boom(x))


lijst parsing
"l...e"

f(tekst) = 

;rest = r
;eerste = rest → 
;zolang(f, (rest0 ≠ "e"), (lijst,rest → lijst || rest.eerste(1)
s(0) =
	| 'd' || cat(obj)
s(0) = 'd' ⇒ (★ = "e")

f = 
  standaarduitvoer ↦ "stduit"
  kanaaluitvoer ↦
    [200,30] ↦ "udp"

; yes!
app(
	+(2 3)
	-(A 1)
)
