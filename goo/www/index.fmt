<!DOCTYPE html>
<html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<head>
	<title>Taal</title>
	<link rel="stylesheet" href="index.css">
</head>
<body>

<div class="paneel">
	<button id="vorige">‚èÆ</button>
	<button id="engels" onclick="localStorage.setItem('cc', '{anderecc}'); document.location='{taallink}';"><img id="vlag" src="{taalvlag}"></img></button>
	<button id="speel">‚ñ∂</button>
	<button id="fullscreen" onclick="fullscreen()">‚á≤</button><!--‚õ∂-->
	<button id="volgende">‚è≠</button>
	<!--<button id="opnieuw">‚ü≤</button>-->
	<!--<button id="info">üõà</button>-->
</div>

<!-- in -->
<div class="in" tabindex="1">
	<textarea id="broncode" name="broncode">{laden}</textarea> 
</div>

<!-- uit! -->
<div id="uit" tabIndex="2" >
</div>

<div style="height:100vh;">h</div>

	<pre id="code"> </pre>

<!--
<div id="wat">
	<h1><i>{overkop}</i></h1>
	<p>{over1}</p>
	<p>{over2}</p>
	<p>{over3}</p>

	<h1><i>{qena}</i></h1>
		<h2>{q1hoe}</h2>
		<p>{a1web}</p>
		<input id="vraag" placeholder="{stelvraag}"></input>
		<br>
		<button id="vraagknop" onclick="fetch('/vraag', {method: 'post', body: document.getElementById('vraag').value}).then(x => {document.getElementById('vraagknop').style.backgroundColor='green'; document.getElementById('vraag').value=''; document.getElementById('vraag').placeholder='{vraagverz}';})">{vraag}</button>
		<div id="qena">
		</div>
	</p>
-->

</body>
<link rel="stylesheet" href="lib/slang.css">
<link rel="stylesheet" href="lib/codemirror.css">

<script src="lib/fastclick.js"></script>
<script src="lib/codemirror.js"></script>
<script src="lib/addon/edit/matchbrackets.js"></script>
<script src="lib/addon/selection/active-line.js"></script>
<script src="lib/addon/search/search.js"></script>
<script src="lib/addon/search/searchcursor.js"></script>
<script src="lib/taal.js"></script>
<script src="lib/vim.js"></script>
<script>

	// autoherleid engels
	if (localStorage.getItem("cc") != "{cc}") {
		localStorage.setItem("cc", "{anderecc}");
		document.location='{taallink}';
	}

	// demoindex

	var cc = ("{cc}" == "nl") ? "" : ".en";

	var demoindex = 0;
	var demos = [ 'pong', 'buis', 'cirkels', 'salvobal', 'paint' ] ;
	var uit = document.getElementById('uit');

	var speelknop = document.getElementById("speel");
	var vorigeknop = document.getElementById("vorige");
	var volgendeknop = document.getElementById("volgende");
	var cknop = '#012ED4';
	var laadbalk = document.getElementById("laadbalk");
	var js = document.getElementById("js");

	var preview = document.createElement("div", "preview");
	preview.className = "preview";
	stop = true;
	var wraps = document.getElementsByClassName("CodeMirror-wrap");

	function playfunc() {
		speelknop.style.backgroundColor = '#000E42';
		stop = true;

		fetch('/vt', {method: "POST", body: editor.getValue()})
			.then(x => x.json())
			.then(j => {
				onsuccess();
				speelknop.innerHTML = "‚ñ†";
				setErrors(j.fouten);

				// debug info
				wraps[0].onmousemove = (ev) => {
					var pos = editor.coordsChar({left: ev.clientX, top: ev.clientY});
					var token = editor.getTokenAt(pos);
					console.log(token);

					var widgetpos = {line: pos.line, ch: token.start};
					if (token.type == "variable") {
						preview.innerHTML = token.string;
					}
					else {
						preview.innerHTML = "";
					}
					editor.addWidget(widgetpos, preview);
				};

				try {
					setTimeout(() => {stop = false; }, 100);
					eval(j.js);


					//uit.focus(); WAUW
				} catch (e) {
					//alert(e + e.stack);
					uit.innerHTML = e + "\n" + e.stack + "\n" + j.js;
					//var genlines = e.stack.match(/\d+/g);
					//alert("GENLINES: "+genlines)
					for (var i = 0; i < Math.min(genlines.length, 3); i++) {
						//alert("GENLINE: " + genlines[i]);
						var bronloc = j.gen2bron[0+genlines[i]];
						alert("BRONLOC: "+JSON.stringify(bronloc));
						// error: {html, loc: {anchor: {line: int } } }
						selecteer(bronloc);
						var fout = { html: e.message, loc: bronloc };
						setErrors([fout]);
					}
					//setErrors({
					uit.innerHTML = "Fout!";
				}
			})
	}

	function stopfunc() {
		wraps[0].onmousemove = undefined;
		preview.innerHTML = '';

		stop = true;
		setErrors([]);
		speelknop.innerHTML = "‚ñ∂";
		uit.onmousemove = undefined;
		uit.onkeydown = undefined;
		uit.onkeyup = undefined;
		uit.innerHTML = "";
		nieuw = null;
		tekst = null;
		speelknop.style.background = cknop;
		speelknop.style.transitionDuration = '1.0s';
	}

	// make fullscreen
	function fullscreen() {
		uit.children[0].requestFullscreen();
	}

	function playorstop() {
		if (stop) {
			playfunc();
		} else {
			stopfunc(); 
		}
	}
	
	speelknop.addEventListener("mousedown", playorstop);

	volgendeknop.addEventListener("mousedown", function() {
		stopfunc();
		setErrors([]);
		demoindex++;
		demoindex = Math.min(demoindex, demos.length-1);
		fetch('/ex/' + demos[demoindex] + cc + '.code')
			.then(res => res.text())
			.then(data => {onsuccess(); editor.setValue(data); playfunc();});
	});
	vorigeknop.addEventListener("mousedown", function() {
		stopfunc();
		setErrors([]);
		demoindex--;
		demoindex = Math.max(demoindex, 0);
		fetch('/ex/' + demos[demoindex] + cc + '.code')
			.then(res => res.text())
			.then(data => {onsuccess(); editor.setValue(data); playfunc();});
	});

	function onsuccess() {

		speelknop.innerHTML = '‚ñ∂';
		speelknop.style.background = 'green';
		speelknop.style.transitionDuration = '0.0s';
	}

	function onerror(e) {
		speelknop.innerHTML = '‚ñ∂';
		speelknop.style.background = 'red';
		speelknop.style.transitionDuration = '0.0s';

		setTimeout(function() {
			speelknop.style.background = cknop;
		}, 5000);
	}

  var editor = CodeMirror.fromTextArea(document.getElementById("broncode"), {
    lineNumbers: false,
    matchBrackets: true,
    mode: "taal",
		indentUnit: 2,
		tabSize: 2,
		indentWithTabs: true,
		theme: 'slang',
		styleActiveLine: true,
		cursorScrollMargin: 10,
		lineWrapping: true,
		height: "1200px",

		extraKeys: {
			"Shift-Enter": function(cm) { playfunc(); },
			"Shift-Esc": function(cm) { cm.setOption('keyMap', 'vim'); },
			"Ctrl-Y": function(cm) { cm.setOption('keyMap', 'vim'); },
		},
  });

	// lokaal opslaan
	if (localStorage.getItem("code")) {
		editor.setValue(localStorage.getItem("code"));
		playfunc();
	}
	else {
		editor.setValue("{laden}");
		fetch('/ex/' + demos[0] + cc + '.code')
			.then(resp => resp.text())
			.then(text => {editor.setValue(text); playfunc(); });
	}

	setInterval((x) => localStorage.setItem("code", editor.getValue()), 10000);


	//editor.setSize('50%', '300px');

	//editor.setSize(null, '800px');

	// zet de codemirror selectie
	function selecteer(loc) {
		editor.setSelection(loc.anchor, loc.head);
	}

	// jaja!
	var oldWidgets = [];
	var oldLineWidgets = [];

	// error.loc.anchor.line
	// error: {html, loc: {anchor: {line: int } } }
	function setErrors(errors) {

		// verwijder oude
		for (var i = 0; i < oldWidgets.length; i++)
			oldWidgets[i].parentNode.removeChild(oldWidgets[i]);
		oldWidgets = [];

		for (var i = 0; i < oldLineWidgets.length; i++)
			oldLineWidgets[i].clear();
		oldLineWidgets = [];
		
		for (var i = 0; i < errors.length; i++) {
			var error = errors[i];
				var inline = document.createElement("div");
					inline.innerHTML = '<b>&nbsp;<!--‚ö†--></b>';
					inline.classList.add("fouticoon");
					inline.style.fontFamily = 'Verdana';
					inline.style.position = 'absolute';
					inline.style.marginRight = '0px';
					inline.style.marginTop = '-18px';
					//inline.style.zIndex	= '9';
			oldWidgets.push(inline);
			var a = editor.addWidget(error.loc.anchor, inline, {above: true});
				var message = document.createElement("div");
					message.classList.add(error.type+"fout");
					message.classList.add("fout");
					message.innerHTML = error.html;

			var line = error.loc.anchor.line;
			if (line >= editor.lineCount() || line < 0)
				line = 0;
			var b = editor.addLineWidget(line, message);
			oldLineWidgets.push(b);
		}
	}

	// magische symbolen
	var magisch = {
		"*": "¬∑",
		"@": "‚àò",
		"!": "¬¨",
	};
	var bimagisch = {
		"|_": "‚åä",
		"_|": "‚åã",
		"|^": "‚åà",
		"^|": "‚åâ",
		"||": "‚Äñ",
		"0/": "‚àÖ",
		"/0": "‚àÖ",
		"o/": "‚àÖ",
		"/o": "‚àÖ",
		"ooo": "‚àû",
		"tau": "œÑ",
		"som": "Œ£",
		"sqrt": "‚àö",
		"->": "‚Üí",
		"-->": "‚Ü¶",
		">=": "‚â•",
		"<=": "‚â§",
		"=<": "‚â§",
		"=/": "‚â†",
		"/=": "‚â†",
		"=>": "‚áí",
		"xx": "√ó",
		"^2": "¬≤",
		"^3": "¬≥",
		"_0": "‚ÇÄ",
		"_1": "‚ÇÅ",
		"_2": "‚ÇÇ",
		"_3": "‚ÇÉ",
		"^-1": "‚Åª¬π",
		"RR": "‚Ñù",
		"NN": "‚Ñï",
		"ZZ": "‚Ñ§",
		"BB": "ùîπ",
		"QQ": "‚Ñö",
		"HH": "‚Ñç",
	};
	editor.on("beforeChange", (cm,change) => {
		if (magisch[change.text]) {
			//cm.replaceRange(magisch[change.text], change.from, change.to);
			//return true;
			change.update(change.from,change.to,magisch[change.text]);
		}
		var ch = change.from.ch;
		var line = change.from.line;

		var zin = cm.doc.getLine(line);

		var l2 = zin.substr(Math.max(ch-1, 0), 1) + change.text;
		var l3 = zin.substr(Math.max(ch-2, 0), 2) + change.text;
		var l4 = zin.substr(Math.max(ch-3, 0), 3) + change.text;
		var l5 = zin.substr(Math.max(ch-4, 0), 4) + change.text;
		var l6 = zin.substr(Math.max(ch-5, 0), 5) + change.text;
		var l7 = zin.substr(Math.max(ch-6, 0), 6) + change.text;

		var a;
		var len;
		if (bimagisch[l2]) { len = 2; a = bimagisch[l2]; }
		if (bimagisch[l3]) { len = 3; a = bimagisch[l3]; }
		if (bimagisch[l4]) { len = 4; a = bimagisch[l4]; }
		if (bimagisch[l5]) { len = 5; a = bimagisch[l5]; }
		if (bimagisch[l6]) { len = 6; a = bimagisch[l6]; }
		if (bimagisch[l7]) { len = 7; a = bimagisch[l7]; }
	
		if (a)
		{
			change.update({ch:ch-len+1,line:line}, {ch:change.to.ch,line:change.to.line}, a);
		}
	});

	//var vim = document.getElementById("vim");
	//vim.addEventListener("click", function() { editor.setOption('keyMap', 'vim'); });
	// klik gewoon op Shift+Escape ...


</script>
</html>
