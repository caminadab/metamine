welkom		Welcome
kop1			A new coding language.
kop2			Intuitive and declarative.
taalvlag	nl.svg
taallink	/
overkop		What
over1			Taal is a new way of coding. Write declarative code quickly in the form of simple rules and don't worry about difficult frameworks, libraries or other 'modern' technology.
over2			Control flow is calculated by the compiler. This makes it much easier to write modular code.
over3			As every value is 'live' there is no need for callbacks, hooks or threads: a list of connected clients displayed in a gui window will be automatically kept up to date. 
qena			Q&A
q1hoe			How does it work?
a1web			A webservice translates your code to javascript. Your device then runs the javascript.
vraag			Ask!
vraagverz	Question sent
stelvraag	Ask your question...
demo1			; every program needs to define 'out'\nout = "hoi"
demo2			; you can define variables\na = 3\nb = 2\nout = a + b
demo3			; movable circle (use the arrow keys)\nx := 10\ny := 5\nif keyRight then x := x' + 0.1 end\nif keyLeft then x := x' - 0.1 end\nout = canvas [ circle(x,y,1) ]
demo4			; paint app\n; draw with your mouse\ncircles := []\nout = canvas circles\n\n; add dot at mouse position\nif mouseClick then\n	circles := circles' ‖ [ circle(mouseX, mousY, 0.1) ]\nend\n\n; remove them with space\nif keySpace then\n	circles := circles' from 1\nend\n
demo5			; simple stopwatch\nout = runtime\n
demo6			; create a timer\ntimer = 3 - int(runtime)\nif timer > 0 then\n\tout = text(timer)\nelse\n\tout = "Boom!"\nend'
demo7			; circle (canvas is 18×10)\nr = runtime\nc = circle(mouseX,mouseY,r)\nuit = canvas [c]\n\n; circletoy (use mouse/touch)\nout = canvas circles\ncircles = (0..15) map f\nf = i → circle(mouseX ^ (i/8), 5, i/4)
demo8			; PONG 2019\n\n; players\ny1 := 3.5\ny2 := 3.5\nw = 1 ; player width\nh = 3 ; player height\nxmin = 0\nxmax = 17.777 - w\nymax = 10 - h\n\n; ball\nballx := 17.777 / 2\nbally := 5\nballvx := -0.01\n\nif 2 > 1 then\n	ballx := ballx' + ballvx'\nend\nif keySpace then\n	ballx := 10\nend\n\n; keyboard right\nif keyUp and y1' < ymax then y1 := y1' + 0.2 end\nif tkeyDown en y1' > 0    then y1 := y1' - 0.2 end\n\n; keyboard left\nif keyW and y2' < ymax then y2 := y2' + 0.2 end\nif keyS and y2' > 0    then y2 := y2' - 0.2 end\n\n; sprites\nleft = rrectangle(xmax, y1, 1, 3)\nright = rectangle(xmin, y2, 1, 3)\nball = circle(ballx, bally, 1)\nscore = label(5, 5, "hoi")\n\n; canvas\nout = canvas [ left, right, ball, score ]
demo9			; sum the numbers 1 to 1000\nuit = Σ 1 .. 1001'
demo10		; cool circles\nr = runtime + n/2 + n/5 + n/9 + n/100\n\nf = n + sin(runtime) → circle(n/1,g(n),abs(sin(3·r))·abs(2·sin(runtime/100)))\ng = y → sin(0.4 · runtime + y) + 4\n\ncircles = (0..40) map f\nout = canvas circles
demo11		; function composition\ng = x → x + 1\nh = y → y / 2 ; typ een "→" met "->"\nf = g² ∘ h ∘ g² ; typ met "@" en "^2" \nuit = f(3)
demo12		; zeg een aantal keer "hoi"\naantal = int(runtime)\nf = x → x ‖ " hoi"\nuit = (f^aantal)("groet:")
demo13		; letters a t/m j\nf(i) = i + \'a\'\nuit = (0 .. 10) map f
demo14		; neem van elke letter de volgende\nuit = "Iho" map (a → a + 1)
