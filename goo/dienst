#!/usr/bin/lua
package.path = package.path..';../?.lua'

require 'naarlua'
require 'naarweb'
require 'infix'
require 'rapporteer-syntax'
require 'json'

require 'ontleed'
require 'typeer'
require 'oplos'

local socket = require 'socket'
local server = socket.bind('127.0.0.1','1237')
assert(server)
local sockets = {server}
local coros = {}

local function cat(...)
	local abc = {...}
	local r = {}
	for i,t in ipairs(abc) do
		for i,v in ipairs(t) do	
			r[#r+1] = v
		end
	end
	return r
end

-- DE webfunctie
-- vt: code â†’ {html?, fouten?}
--   fouten: [ fout... ]
--   fout: syntaxfout | typefout | oplosfout
--     syntaxfout: { type="syntax", loc, waarom, waarde }
--       loc: codemirror-locatie
--     typefout: { type="typeer", ? }
--     oplosfout: { type="oplos", ? }
-- 
-- de "fout" als los interpretabel object
function vt(code)
	local exp = ontleed(code)
	local syntaxfouten = {}
	for exp in boompairs(exp) do
		if exp.fout then -- TODO niet meer in boom
			local syntaxfout = {
				type = "syntax",
				pos = {
					ch = exp.loc.x1 - 1,
					line = exp.loc.y1 - 1
				},
				waarom = exp.fout,
				waarde = "?",
			}
			syntaxfouten[#syntaxfouten+1] = syntaxfout
		end
	end

	local types,typeerfouten = typeer(exp)
	
	for i=1,#typeerfouten do
		local fout = typeerfouten[i]
		typeerfouten[i] = {
			type = "typeer",
			pos = {
				ch = fout.loc.x1 - 1,
				line = fout.loc.y1 - 1,
			},
			waarom = fout.msg,
		}
	end

	local waarde,oplosfouten

	if not typeerfouten or true then
		waarde,oplosfouten = oplos(exp, 'tekening')
	end

	-- foutje kan gebeuren
	local fouten
	if syntaxfouten or typeerfouten or oplosfouten then
		fouten = cat(syntaxfouten, typeerfouten) --, oplosfouten or {})
	end

	local html

	if waarde then
		html = naarweb(waarde)
	end

	return {
		html = html,
		fouten = fouten,
	}
end

local statusberichten = {
	[200] = "Okee",
	[302] = "Permanente Omleiding",
	[404] = "Niet Gevonden",
	[500] = "Interne Fout",
}

function sendblocking(sock, data)
	local i = 1
	while i < #data do
		local len,err = sock:send(data, i, #data)
		if not len then return nil,err end
		i = i + len + 1 -- laatst verzonden byte
	end
	return #data
end

function serveer(sock)
	local len

	-- header
  coroutine.yield()
	local line = sock:receive('*l')
	local methode,pad = line:match("([^ ]*) ([^ ]*) ([^ ]*)")

	while true do
		coroutine.yield()
		local line = sock:receive('*l')
		if line == '' then
			break
		end
		
		local len0 = line:match('Content%-Length: (%d+)')
		if len0 then
			len = tonumber(len0)
		end
	end

	-- content
	local inn
	local uit
	if len then
		coroutine.yield()
		inn = sock:receive(len)
	end

	-- uitvoer, log (in), http statuscode
	local uit, inL, status

	if inn then
		inL = string.format('%q', tostring(inn)):gsub('\n', '\\n')
	end

	-- VERTAAL!
	if pad == '/vt' then
		local internefout
		local ok,j = xpcall(vt, debug.traceback, inn)
		if not ok then internefout = exp end

		if not ok then
			status = 500
			uit = '<pre>'.."INTERNE FOUT!\n"..internefout..'</pre>'
		else
			status = 200
			uit = json.encode(j) -- json(html, fouten)
		end

	-- LEES!
	else
    pad = pad:gsub('%.%.', '%.')
    pad = pad:sub(2, #pad)
		if pad == '' then pad = 'index.html' end
		uit = file(pad)
		status = 200
		if not uit then
			uit = 'pagina niet gevonden'
			status = 404
		end
	end

	print(os.date(), status, pad, inL)

	-- header
	local h = string.format('HTTP/1.0 %d %s\r\n', status, statusberichten[status])
	local t = {}
	t[#t+1] = h
	t[#t+1] = "Host: localhost\r\n"
	t[#t+1] = "Server: Lua 5.2\r\n"
	t[#t+1] = "Content-Length: "..#uit.."\r\n"
	t[#t+1] = "\r\n"
	t[#t+1] = uit
	sendblocking(sock, table.concat(t))

	sock:close()
end


-- test!
local j = vt("tekening = [a, 2, 3]\na = 68 || []")

print(json.encode(j))

for i,fout in ipairs(j.fouten) do
	print('fout', fout.waarom, fout.pos.line, fout.pos.ch)
end

-- stop als argumenten!
local veto = ...
if veto then return end

-- os.execute("chromium http://localhost:1237 &")


while true do
	local rs = socket.select(sockets)

	-- connect
	if rs[1] == server then
		local client = server:accept()
		sockets[client] = #sockets+1
		sockets[#sockets+1] = client
		coros[client] = coroutine.create(serveer, client)
		coroutine.resume(coros[client], client)
		table.remove(rs, 1)
	end

	-- data
	for i=#rs,1,-1 do
		local client = rs[i]
		local coro = coros[client]
		if not coro or coroutine.status(coro) ~= 'suspended' then
			table.remove(sockets, sockets[client]) --client)
			sockets[client] = nil
			coros[client] = nil
		else
			local unfinished,err = coroutine.resume(coros[client])
			if err then print('ERR', err) end
			if not unfinished then
				table.remove(sockets, sockets[client]) --client)
				sockets[client] = nil
				coros[client] = nil
			end
		end
	end

end
